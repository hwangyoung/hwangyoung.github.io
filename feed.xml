<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2024-06-03T01:56:35+00:00</updated><id>/feed.xml</id><title type="html">Young’s Logs</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>Young Hwang</name></author><entry><title type="html">KEYS와 FLUSHALL 명령어를 쓰지 말아야되는 이유</title><link href="/redis/2024/03/05/redis-keys-flushall.html" rel="alternate" type="text/html" title="KEYS와 FLUSHALL 명령어를 쓰지 말아야되는 이유" /><published>2024-03-05T00:00:00+00:00</published><updated>2024-03-05T00:00:00+00:00</updated><id>/redis/2024/03/05/redis-keys-flushall</id><content type="html" xml:base="/redis/2024/03/05/redis-keys-flushall.html"><![CDATA[<p>Redis를 사용하다 보면 의도하지 않은 장애가 발생하거나 성능이 저하되는 경우가 있습니다.
이들은 모두 Redis가 싱글 스레드라는 것을 잊어 버리거나 모르고 있기 때문에 발생하는 문제입니다.</p>

<p>Redis는 싱글 스레드이기 때문에, 태생적으로 하나의 명령이 오랜 시간을 소모하는 작업에는 적합하지 않습니다.
그러나 이러한 특성을 이해하지 못하는 경우 장애가 발생하게 됩니다.</p>

<p>이번 글에서는 <code class="language-plaintext highlighter-rouge">KEYS</code>와 <code class="language-plaintext highlighter-rouge">FLUSHALL</code> 명령어가 왜 장애의 원인될 수 있는지 알아보겠습니다.</p>

<h2 id="서버에서-keys-명령를-쓰지-말자">서버에서 KEYS 명령를 쓰지 말자</h2>

<p><code class="language-plaintext highlighter-rouge">KEYS</code> 명령어는 특정 패턴에 매칭되는 키를 찾아주는 명령어입니다.
예를 들어, <code class="language-plaintext highlighter-rouge">KEYS *</code>는 모든 키를 찾아주고, <code class="language-plaintext highlighter-rouge">KEYS user:*</code>는 <code class="language-plaintext highlighter-rouge">user:</code>로 시작하는 모든 키를 찾아줍니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redis 127.0.0.1:6379&gt; keys user:<span class="k">*</span>
  1<span class="o">)</span> <span class="s2">"user"</span>
  2<span class="o">)</span> <span class="s2">"user:1h"</span>
  3<span class="o">)</span> <span class="s2">"user:2h"</span>
</code></pre></div></div>

<p>지원하는 glob-style 패턴을 살펴보면 다음과 같습니다.</p>

<table>
  <thead>
    <tr>
      <th>패턴</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>h?llo</td>
      <td>matches hello, hallo and hxllo</td>
    </tr>
    <tr>
      <td>h*llo</td>
      <td>matches hllo and heeeello</td>
    </tr>
    <tr>
      <td>h[ae]llo</td>
      <td>matches hello and hallo, but not hillo</td>
    </tr>
    <tr>
      <td>h[^e]llo</td>
      <td>matches hallo, hbllo, … but not hello</td>
    </tr>
    <tr>
      <td>h[a-b]llo</td>
      <td>matches hallo and hbllo</td>
    </tr>
  </tbody>
</table>

<p>여기까지 살펴보면 <code class="language-plaintext highlighter-rouge">KEYS</code> 명령어는 특정 패턴에 매칭되는 키를 찾아주는 강력한 명령어라는 것을 알 수 있습니다.
하지만 실제 서비스에서 해당 명령을 사용하면 장애로 이어질 가능성이 높습니다.</p>

<p><a href="https://redis.io/commands/keys/">Redis 매뉴얼</a>에서도 다음과 같이 해당 명령은 실제 제품에서는 쓰지말라고 권고하고 있습니다.</p>

<blockquote>
  <p>Warning: consider KEYS as a command that should only be used in production environments with extreme care.
It may ruin performance when it is executed against large databases.
This command is intended for debugging and special operations, such as changing your keyspace layout.
Don’t use KEYS in your regular application code.
If you’re looking for a way to find keys in a subset of your keyspace, consider using SCAN or sets.</p>
</blockquote>

<p>왜 그렇다면 <code class="language-plaintext highlighter-rouge">KEYS</code> 명령어를 사용하면 안된다고 권고 할까요?
소스코드를 보면 이해할 수 있습니다.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">keysCommand</span><span class="p">(</span><span class="n">client</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">dictEntry</span> <span class="o">*</span><span class="n">de</span><span class="p">;</span>
    <span class="n">sds</span> <span class="n">pattern</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">ptr</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">plen</span> <span class="o">=</span> <span class="n">sdslen</span><span class="p">(</span><span class="n">pattern</span><span class="p">),</span> <span class="n">allkeys</span><span class="p">,</span> <span class="n">pslot</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">numkeys</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">void</span> <span class="o">*</span><span class="n">replylen</span> <span class="o">=</span> <span class="n">addReplyDeferredLen</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
    <span class="n">allkeys</span> <span class="o">=</span> <span class="p">(</span><span class="n">pattern</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'*'</span> <span class="o">&amp;&amp;</span> <span class="n">plen</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">cluster_enabled</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">allkeys</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">pslot</span> <span class="o">=</span> <span class="n">patternHashSlot</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">plen</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">kvstoreDictIterator</span> <span class="o">*</span><span class="n">kvs_di</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">kvstoreIterator</span> <span class="o">*</span><span class="n">kvs_it</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">pslot</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">kvstoreDictSize</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">keys</span><span class="p">,</span> <span class="n">pslot</span><span class="p">))</span> <span class="p">{</span>
            <span class="cm">/* Requested slot is empty */</span>
            <span class="n">setDeferredArrayLen</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">replylen</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">kvs_di</span> <span class="o">=</span> <span class="n">kvstoreGetDictSafeIterator</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">keys</span><span class="p">,</span> <span class="n">pslot</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">kvs_it</span> <span class="o">=</span> <span class="n">kvstoreIteratorInit</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="o">-&gt;</span><span class="n">keys</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">robj</span> <span class="n">keyobj</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="n">de</span> <span class="o">=</span> <span class="n">kvs_di</span> <span class="o">?</span> <span class="n">kvstoreDictIteratorNext</span><span class="p">(</span><span class="n">kvs_di</span><span class="p">)</span> <span class="o">:</span> <span class="n">kvstoreIteratorNext</span><span class="p">(</span><span class="n">kvs_it</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sds</span> <span class="n">key</span> <span class="o">=</span> <span class="n">dictGetKey</span><span class="p">(</span><span class="n">de</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">allkeys</span> <span class="o">||</span> <span class="n">stringmatchlen</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span><span class="n">plen</span><span class="p">,</span><span class="n">key</span><span class="p">,</span><span class="n">sdslen</span><span class="p">(</span><span class="n">key</span><span class="p">),</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">initStaticStringObject</span><span class="p">(</span><span class="n">keyobj</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">keyIsExpired</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">db</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">keyobj</span><span class="p">))</span> <span class="p">{</span>
                <span class="n">addReplyBulkCBuffer</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">sdslen</span><span class="p">(</span><span class="n">key</span><span class="p">));</span>
                <span class="n">numkeys</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">CLIENT_CLOSE_ASAP</span><span class="p">)</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">kvs_di</span><span class="p">)</span>
        <span class="n">kvstoreReleaseDictIterator</span><span class="p">(</span><span class="n">kvs_di</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">kvs_it</span><span class="p">)</span>
        <span class="n">kvstoreIteratorRelease</span><span class="p">(</span><span class="n">kvs_it</span><span class="p">);</span>
    <span class="n">setDeferredArrayLen</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">replylen</span><span class="p">,</span><span class="n">numkeys</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>소스 코드를 살펴보면, 현재 설정된 db의 모든 키를 모두 순회하며 stringmatchlen 함수를 통해 패턴에 매칭되는 키를 찾아주는 것을 알 수 있습니다.
이러한 방식으로 동작하기 때문에, 만약 Redis에 수십만개 이상의 키가 존재한다면, 해당 명령어를 실행하는 동안 다른 명령어들이 블로킹되어 성능이 저하될 수 있습니다.
그렇다면 어떻게 해야 할까요?</p>

<h3 id="scan-명령어를-사용하자">SCAN 명령어를 사용하자</h3>

<p><code class="language-plaintext highlighter-rouge">SCAN</code> 명령어는 <code class="language-plaintext highlighter-rouge">KEYS</code> 명령어와 비슷하게 동작하지만, 키를 순회하는 방식이 다릅니다.
SCAN 명령어는 요청을 여러 개의 작은 요청으로 분할하여 처리하므로, 대규모 데이터셋에서도 실시간으로 요청을 처리할 수 있습니다.</p>

<p>또한 Redis 클러스터에서는 KEYS 명령어를 사용할 수 없습니다.
대신 SCAN 명령어를 사용하여 클러스터 전체에서 키를 검색할 수 있습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; SCAN 0 MATCH user:<span class="k">*</span>
  1<span class="o">)</span> <span class="s2">"user"</span>
  2<span class="o">)</span> <span class="s2">"user:1h"</span>
  3<span class="o">)</span> <span class="s2">"user:2h"</span>
</code></pre></div></div>

<h2 id="서버에서-flushall-명령을-쓰지-말자">서버에서 FLUSHALL 명령을 쓰지 말자</h2>

<p>모든 데이터를 삭제하는 명령어인 ‘FLUSHALL/FLUSHDB’라는 명령어가 존재합니다.
Redis는 db라는 가상의 공간을 분리할 수 있는 개념을 제공하고, select 명령으로 이동할 수 있습니다.
이를 통해 같은 키라도 db ‘0번’이나 ‘1번’ 등으로 나누어 여러개의 데이터를 저장할 수 있습니다.
이런 db 하나의 내용을 통째로 지우는 것이 ‘FLUSHDB’ 명령입니다.
(따로 select 명령어로 db 지정하지 않을 시 0번을 사용합니다.)
또한, 모든 db의 내용을 지우는 것이 ‘FLUSHALL’ 명령입니다.</p>

<p>간단히 예를 들어 살펴 보겠습니다.
아래는 db 0번과 1번에 각각 ‘young’이라는 키를 생성하고 ‘123’, ‘456’이라는 값을 할당하였습니다.
이때 select 명령어로 db를 변경하여 각각의 db에 키를 가져올 수 있습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; <span class="k">select </span>0
OK
127.0.0.1:6379&gt; <span class="nb">set </span>name <span class="s1">'young'</span>
OK
127.0.0.1:6379&gt; get name
<span class="s2">"young"</span>
127.0.0.1:6379&gt; <span class="k">select </span>1
OK
127.0.0.1:6379[1]&gt; <span class="nb">set </span>firstname <span class="s1">'hwang'</span>
OK
127.0.0.1:6379[1]&gt; get firstname
<span class="s2">"hwang"</span>
</code></pre></div></div>

<p>flushdb를 사용하여 하나의 db를 선택하여 지우거나 flushall로 전체 db를 지울 때 주의를 해야합니다.
flushall 명령은 전체 데이터를 다 지우며, keys 명령처럼 많은 시간이 필요합니다.</p>

<p>fushall을 이용해서 데이터를 지우는 속도를 측정해보면 아이템 개수에 비례하여 시간이 걸립니다.</p>

<p>다음 소스 코드를 통해 flushall 명령에 대해 살펴 보겠습니다.</p>

<blockquote>
  <p>/src/db.c</p>
</blockquote>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* FLUSHALL [ASYNC]
 *
 * Flushes the whole server data set. */</span>
<span class="kt">void</span> <span class="nf">flushallCommand</span><span class="p">(</span><span class="n">client</span> <span class="o">*</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">flags</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">getFlushCommandFlags</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="o">&amp;</span><span class="n">flags</span><span class="p">)</span> <span class="o">==</span> <span class="n">C_ERR</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="cm">/* flushall should not flush the functions */</span>
    <span class="n">flushAllDataAndResetRDB</span><span class="p">(</span><span class="n">flags</span> <span class="o">|</span> <span class="n">EMPTYDB_NOFUNCTIONS</span><span class="p">);</span> 

    <span class="cm">/* Without the forceCommandPropagation, when DBs were already empty,
     * FLUSHALL will not be replicated nor put into the AOF. */</span>
    <span class="n">forceCommandPropagation</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">PROPAGATE_REPL</span> <span class="o">|</span> <span class="n">PROPAGATE_AOF</span><span class="p">);</span>

    <span class="n">addReply</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">shared</span><span class="p">.</span><span class="n">ok</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>flushallCommand 함수는 FLUSHALL 명령을 처리하는 함수 입니다.
getFlushCommandFlags 함수를 통해 동기적으로 실행되어야 하는지, 아니면 비동기로 실행되어야 하는지 결정합니다.
flushAllDataAndResetRDB 함수를 통해 실제 데이터를 지우는 작업을 수행합니다.</p>

<blockquote>
  <p>/src/db.c</p>
</blockquote>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Flushes the whole server data set. */</span>
<span class="kt">void</span> <span class="nf">flushAllDataAndResetRDB</span><span class="p">(</span><span class="kt">int</span> <span class="n">flags</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">server</span><span class="p">.</span><span class="n">dirty</span> <span class="o">+=</span> <span class="n">emptyData</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">flags</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">child_type</span> <span class="o">==</span> <span class="n">CHILD_TYPE_RDB</span><span class="p">)</span> <span class="n">killRDBChild</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">saveparamslen</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">rdbSaveInfo</span> <span class="n">rsi</span><span class="p">,</span> <span class="o">*</span><span class="n">rsiptr</span><span class="p">;</span>
        <span class="n">rsiptr</span> <span class="o">=</span> <span class="n">rdbPopulateSaveInfo</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rsi</span><span class="p">);</span>
        <span class="n">rdbSave</span><span class="p">(</span><span class="n">SLAVE_REQ_NONE</span><span class="p">,</span><span class="n">server</span><span class="p">.</span><span class="n">rdb_filename</span><span class="p">,</span><span class="n">rsiptr</span><span class="p">,</span><span class="n">RDBFLAGS_NONE</span><span class="p">);</span>
    <span class="p">}</span>

<span class="cp">#if defined(USE_JEMALLOC)
</span>    <span class="cm">/* jemalloc 5 doesn't release pages back to the OS when there's no traffic.
     * for large databases, flushdb blocks for long anyway, so a bit more won't
     * harm and this way the flush and purge will be synchronous. */</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">EMPTYDB_ASYNC</span><span class="p">))</span>
        <span class="n">jemalloc_purge</span><span class="p">();</span>
<span class="cp">#endif
</span><span class="p">}</span>
</code></pre></div></div>

<p>emptyData 함수를 호출하여 모든 데이터를 비웁니다.
첫번째 인자로 -1을 넘겨주면 모든 db를 비우게 됩니다.</p>

<blockquote>
  <p>/src/db.c</p>
</blockquote>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Remove all data (keys and functions) from all the databases in a
 * Redis server. If callback is given the function is called from
 * time to time to signal that work is in progress.
 *
 * The dbnum can be -1 if all the DBs should be flushed, or the specified
 * DB number if we want to flush only a single Redis database number.
 *
 * Flags are be EMPTYDB_NO_FLAGS if no special flags are specified or
 * EMPTYDB_ASYNC if we want the memory to be freed in a different thread
 * and the function to return ASAP. EMPTYDB_NOFUNCTIONS can also be set
 * to specify that we do not want to delete the functions.
 *
 * On success the function returns the number of keys removed from the
 * database(s). Otherwise -1 is returned in the specific case the
 * DB number is out of range, and errno is set to EINVAL. */</span>
<span class="kt">long</span> <span class="kt">long</span> <span class="nf">emptyData</span><span class="p">(</span><span class="kt">int</span> <span class="n">dbnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="kt">void</span><span class="p">(</span><span class="n">callback</span><span class="p">)(</span><span class="n">dict</span><span class="o">*</span><span class="p">))</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">async</span> <span class="o">=</span> <span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">EMPTYDB_ASYNC</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">with_functions</span> <span class="o">=</span> <span class="o">!</span><span class="p">(</span><span class="n">flags</span> <span class="o">&amp;</span> <span class="n">EMPTYDB_NOFUNCTIONS</span><span class="p">);</span>
    <span class="n">RedisModuleFlushInfoV1</span> <span class="n">fi</span> <span class="o">=</span> <span class="p">{</span><span class="n">REDISMODULE_FLUSHINFO_VERSION</span><span class="p">,</span><span class="o">!</span><span class="n">async</span><span class="p">,</span><span class="n">dbnum</span><span class="p">};</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">removed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">dbnum</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="n">dbnum</span> <span class="o">&gt;=</span> <span class="n">server</span><span class="p">.</span><span class="n">dbnum</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">errno</span> <span class="o">=</span> <span class="n">EINVAL</span><span class="p">;</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/* Fire the flushdb modules event. */</span>
    <span class="n">moduleFireServerEvent</span><span class="p">(</span><span class="n">REDISMODULE_EVENT_FLUSHDB</span><span class="p">,</span>
                          <span class="n">REDISMODULE_SUBEVENT_FLUSHDB_START</span><span class="p">,</span>
                          <span class="o">&amp;</span><span class="n">fi</span><span class="p">);</span>

    <span class="cm">/* Make sure the WATCHed keys are affected by the FLUSH* commands.
     * Note that we need to call the function while the keys are still
     * there. */</span>
    <span class="n">signalFlushedDb</span><span class="p">(</span><span class="n">dbnum</span><span class="p">,</span> <span class="n">async</span><span class="p">);</span>

    <span class="cm">/* Empty redis database structure. */</span>
    <span class="n">removed</span> <span class="o">=</span> <span class="n">emptyDbStructure</span><span class="p">(</span><span class="n">server</span><span class="p">.</span><span class="n">db</span><span class="p">,</span> <span class="n">dbnum</span><span class="p">,</span> <span class="n">async</span><span class="p">,</span> <span class="n">callback</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">dbnum</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">flushSlaveKeysWithExpireList</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">with_functions</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">serverAssert</span><span class="p">(</span><span class="n">dbnum</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
        <span class="n">functionsLibCtxClearCurrent</span><span class="p">(</span><span class="n">async</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cm">/* Also fire the end event. Note that this event will fire almost
     * immediately after the start event if the flush is asynchronous. */</span>
    <span class="n">moduleFireServerEvent</span><span class="p">(</span><span class="n">REDISMODULE_EVENT_FLUSHDB</span><span class="p">,</span>
                          <span class="n">REDISMODULE_SUBEVENT_FLUSHDB_END</span><span class="p">,</span>
                          <span class="o">&amp;</span><span class="n">fi</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">removed</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>emptyDbStructure 함수를 호출하여 실제로 데이터베이스 구조를 비웁니다.</p>

<blockquote>
  <p>/src/db.c</p>
</blockquote>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Remove all keys from the database(s) structure. The dbarray argument
 * may not be the server main DBs (could be a temporary DB).
 *
 * The dbnum can be -1 if all the DBs should be emptied, or the specified
 * DB index if we want to empty only a single database.
 * The function returns the number of keys removed from the database(s). */</span>
<span class="kt">long</span> <span class="kt">long</span> <span class="nf">emptyDbStructure</span><span class="p">(</span><span class="n">redisDb</span> <span class="o">*</span><span class="n">dbarray</span><span class="p">,</span> <span class="kt">int</span> <span class="n">dbnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">async</span><span class="p">,</span>
                           <span class="kt">void</span><span class="p">(</span><span class="n">callback</span><span class="p">)(</span><span class="n">dict</span><span class="o">*</span><span class="p">))</span>
<span class="p">{</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">removed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">startdb</span><span class="p">,</span> <span class="n">enddb</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">dbnum</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">startdb</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">enddb</span> <span class="o">=</span> <span class="n">server</span><span class="p">.</span><span class="n">dbnum</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">startdb</span> <span class="o">=</span> <span class="n">enddb</span> <span class="o">=</span> <span class="n">dbnum</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">startdb</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">enddb</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">removed</span> <span class="o">+=</span> <span class="n">kvstoreSize</span><span class="p">(</span><span class="n">dbarray</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">keys</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">async</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">emptyDbAsync</span><span class="p">(</span><span class="o">&amp;</span><span class="n">dbarray</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">kvstoreEmpty</span><span class="p">(</span><span class="n">dbarray</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">keys</span><span class="p">,</span> <span class="n">callback</span><span class="p">);</span>
            <span class="n">kvstoreEmpty</span><span class="p">(</span><span class="n">dbarray</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">expires</span><span class="p">,</span> <span class="n">callback</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="cm">/* Because all keys of database are removed, reset average ttl. */</span>
        <span class="n">dbarray</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">avg_ttl</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">dbarray</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">expires_cursor</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">removed</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>kvstoreSize 함수를 호출하여 최종적으로 비워진 키의 수를 나타냅니다.
kvstoreEmpty 함수를 호출하여 데이터를 비웁니다.</p>

<blockquote>
  <p>/src/kvstore.c</p>
</blockquote>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">kvstoreEmpty</span><span class="p">(</span><span class="n">kvstore</span> <span class="o">*</span><span class="n">kvs</span><span class="p">,</span> <span class="kt">void</span><span class="p">(</span><span class="n">callback</span><span class="p">)(</span><span class="n">dict</span><span class="o">*</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">didx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">didx</span> <span class="o">&lt;</span> <span class="n">kvs</span><span class="o">-&gt;</span><span class="n">num_dicts</span><span class="p">;</span> <span class="n">didx</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">dict</span> <span class="o">*</span><span class="n">d</span> <span class="o">=</span> <span class="n">kvstoreGetDict</span><span class="p">(</span><span class="n">kvs</span><span class="p">,</span> <span class="n">didx</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">d</span><span class="p">)</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="n">kvstoreDictMetadata</span> <span class="o">*</span><span class="n">metadata</span> <span class="o">=</span> <span class="p">(</span><span class="n">kvstoreDictMetadata</span> <span class="o">*</span><span class="p">)</span><span class="n">dictMetadata</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">metadata</span><span class="o">-&gt;</span><span class="n">rehashing_node</span><span class="p">)</span>
            <span class="n">metadata</span><span class="o">-&gt;</span><span class="n">rehashing_node</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="n">dictEmpty</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">callback</span><span class="p">);</span>
        <span class="n">freeDictIfNeeded</span><span class="p">(</span><span class="n">kvs</span><span class="p">,</span> <span class="n">didx</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">listEmpty</span><span class="p">(</span><span class="n">kvs</span><span class="o">-&gt;</span><span class="n">rehashing</span><span class="p">);</span>

    <span class="n">kvs</span><span class="o">-&gt;</span><span class="n">key_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">kvs</span><span class="o">-&gt;</span><span class="n">non_empty_dicts</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">kvs</span><span class="o">-&gt;</span><span class="n">resize_cursor</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">kvs</span><span class="o">-&gt;</span><span class="n">bucket_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">kvs</span><span class="o">-&gt;</span><span class="n">dict_size_index</span><span class="p">)</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">kvs</span><span class="o">-&gt;</span><span class="n">dict_size_index</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">kvs</span><span class="o">-&gt;</span><span class="n">num_dicts</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
    <span class="n">kvs</span><span class="o">-&gt;</span><span class="n">overhead_hashtable_lut</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">kvs</span><span class="o">-&gt;</span><span class="n">overhead_hashtable_rehashing</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>kvstoreGetDict 함수를 호출하여 kvstore의 dict를 가져옵니다.
dictEmpty 함수를 호출하여 딕셔너리를 비웁니다.</p>

<blockquote>
  <p>/src/dict.c</p>
</blockquote>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">dictEmpty</span><span class="p">(</span><span class="n">dict</span> <span class="o">*</span><span class="n">d</span><span class="p">,</span> <span class="kt">void</span><span class="p">(</span><span class="n">callback</span><span class="p">)(</span><span class="n">dict</span><span class="o">*</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">_dictClear</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">callback</span><span class="p">);</span>
    <span class="n">_dictClear</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">callback</span><span class="p">);</span>
    <span class="n">d</span><span class="o">-&gt;</span><span class="n">rehashidx</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="n">d</span><span class="o">-&gt;</span><span class="n">pauserehash</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">d</span><span class="o">-&gt;</span><span class="n">pauseAutoResize</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>주어진 딕셔너리의 모든 항목을 비우는 역할을 합니다.
_dictClear 함수를 두 번 호출하여 딕셔너리의 두 해시 테이블을 비웁니다.
_dictClear 함수는 딕셔너리의 해시 테이블에서 모든 항목을 제거합니다.
_dictClear(d, 0, callback) 은 첫 번째 해시 테이블을, _dictClear(d, 1, callback) 는 두 번째 해시 테이블을 비웁니다.</p>

<blockquote>
  <p>/src/dict.c</p>
</blockquote>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Destroy an entire dictionary */</span>
<span class="kt">int</span> <span class="nf">_dictClear</span><span class="p">(</span><span class="n">dict</span> <span class="o">*</span><span class="n">d</span><span class="p">,</span> <span class="kt">int</span> <span class="n">htidx</span><span class="p">,</span> <span class="kt">void</span><span class="p">(</span><span class="n">callback</span><span class="p">)(</span><span class="n">dict</span><span class="o">*</span><span class="p">))</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">i</span><span class="p">;</span>

    <span class="cm">/* Free all the elements */</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">DICTHT_SIZE</span><span class="p">(</span><span class="n">d</span><span class="o">-&gt;</span><span class="n">ht_size_exp</span><span class="p">[</span><span class="n">htidx</span><span class="p">])</span> <span class="o">&amp;&amp;</span> <span class="n">d</span><span class="o">-&gt;</span><span class="n">ht_used</span><span class="p">[</span><span class="n">htidx</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">dictEntry</span> <span class="o">*</span><span class="n">he</span><span class="p">,</span> <span class="o">*</span><span class="n">nextHe</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">callback</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">i</span> <span class="o">&amp;</span> <span class="mi">65535</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">callback</span><span class="p">(</span><span class="n">d</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">((</span><span class="n">he</span> <span class="o">=</span> <span class="n">d</span><span class="o">-&gt;</span><span class="n">ht_table</span><span class="p">[</span><span class="n">htidx</span><span class="p">][</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">he</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">nextHe</span> <span class="o">=</span> <span class="n">dictGetNext</span><span class="p">(</span><span class="n">he</span><span class="p">);</span>
            <span class="n">dictFreeKey</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">he</span><span class="p">);</span>
            <span class="n">dictFreeVal</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">he</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">entryIsKey</span><span class="p">(</span><span class="n">he</span><span class="p">))</span> <span class="n">zfree</span><span class="p">(</span><span class="n">decodeMaskedPtr</span><span class="p">(</span><span class="n">he</span><span class="p">));</span>
            <span class="n">d</span><span class="o">-&gt;</span><span class="n">ht_used</span><span class="p">[</span><span class="n">htidx</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
            <span class="n">he</span> <span class="o">=</span> <span class="n">nextHe</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="cm">/* Free the table and the allocated cache structure */</span>
    <span class="n">zfree</span><span class="p">(</span><span class="n">d</span><span class="o">-&gt;</span><span class="n">ht_table</span><span class="p">[</span><span class="n">htidx</span><span class="p">]);</span>
    <span class="cm">/* Re-initialize the table */</span>
    <span class="n">_dictReset</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">htidx</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">DICT_OK</span><span class="p">;</span> <span class="cm">/* never fails */</span>
<span class="p">}</span>
</code></pre></div></div>

<p>주어진 딕셔너리의 모든 항목을 제거하는 역할을 합니다.
먼저 해시 DICTHT_SIZE(d-&gt;ht_size_exp[htidx])로 테이블 크기와 d-&gt;ht_used[htidx] 로 해시 테이블에 사용된 항목 수를 확인 합니다.
dictEntry *he를 사용하여 현재 항목을 가져옵니다.
dictGetNext(he)를 사용하여 다음 항목을 가져옵니다.
dictFreeKey와 dictFreeVal 함수를 사용하여 키와 값을 제거합니다.
이처럼 실제 데이터를 일일이 삭제하는 것을 확인 할 수 있습니다.
따라서 지우는 속도가 O(n)이기 때문에 데이터 양에 영향을 받게 됩니다.</p>]]></content><author><name>Young Hwang</name></author><category term="redis" /><category term="redis" /><summary type="html"><![CDATA[Redis를 사용하다 보면 의도하지 않은 장애가 발생하거나 성능이 저하되는 경우가 있습니다. 이들은 모두 Redis가 싱글 스레드라는 것을 잊어 버리거나 모르고 있기 때문에 발생하는 문제입니다.]]></summary></entry><entry><title type="html">Java 17 Features</title><link href="/java/2024/03/01/java-java-17-features.html" rel="alternate" type="text/html" title="Java 17 Features" /><published>2024-03-01T00:00:00+00:00</published><updated>2024-03-01T00:00:00+00:00</updated><id>/java/2024/03/01/java-java-17-features</id><content type="html" xml:base="/java/2024/03/01/java-java-17-features.html"><![CDATA[<p>Spring Boot 3.0 출시 이후 Java 17 버전이 필수가 되었습니다.
이로 인해 Java 17의 기능에 대한 이해가 중요하게 되었습니다.</p>

<p>Java 17은 Java 의 LTS(Long Term Support) 버전으로 2026년까지 지원이 되며, 개발자 생상성과 프로그램 효율성을 향상시키는 것을 목표로 몇가지 새로운 기능이 추가되었습니다.
이번 포스팅에서는 Java 17의 기능 중 일부를 효과적으로 사용하는 방법을 이해하는 데 도움이 되는 코드 예제와 함께 살펴보겠습니다.</p>

<h2 id="1-pattern-matching-for-switch-statements">1. Pattern matching For switch statements</h2>

<p>Java 17에서는 개발자가 패턴 일치와 관련된 스위치 문의 코드를 단순화할 수 있도록 ‘Pattern matching for switch’ 기능이 추가되었습니다.
이 기능은 switch 문의 여러 조건을 간결하게 표현할 수 있도록 도와줍니다.</p>

<p>이 기능이 도입되기 전에는 switch 문에서 단일 변수의 값을 일련의 상수 또는 표현식과 비교할 수만 있었습니다.
또한 byte, short, int, char, String, enum, Byte, Character, Short, Integer 유형으로 제한 되었습니다.</p>

<p>새로운 기능을 통해 개발자는 패턴을 사용하여 모든 유형의 개체 값과 일치시킬 수 있습니다.</p>

<h3 id="traditional-switch-statement">Traditional switch statement</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getDayOfWeek</span><span class="o">(</span><span class="kt">int</span> <span class="n">dayNum</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">day</span><span class="o">;</span>
    <span class="k">switch</span> <span class="o">(</span><span class="n">dayNum</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
            <span class="n">day</span> <span class="o">=</span> <span class="s">"Monday"</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
            <span class="n">day</span> <span class="o">=</span> <span class="s">"Tuesday"</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
            <span class="n">day</span> <span class="o">=</span> <span class="s">"Wednesday"</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
            <span class="n">day</span> <span class="o">=</span> <span class="s">"Thursday"</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
            <span class="n">day</span> <span class="o">=</span> <span class="s">"Friday"</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="k">case</span> <span class="mi">6</span><span class="o">:</span>
            <span class="n">day</span> <span class="o">=</span> <span class="s">"Saturday"</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="k">case</span> <span class="mi">7</span><span class="o">:</span>
            <span class="n">day</span> <span class="o">=</span> <span class="s">"Sunday"</span><span class="o">;</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="k">default</span><span class="o">:</span>
            <span class="n">day</span> <span class="o">=</span> <span class="s">"Invalid day"</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">day</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="java-12-switch-statement">Java 12 switch Statement</h3>

<p>Java 12 에서는 아래와 같이 switch 문을 사용하여 간결하게 표현할 수 있습니다.
case 문은 이제 새로운 화살표 연산자(-&gt;)를 사용하여 패턴과 결과 표현식을 지정합니다. 
또한 각 경우마다 break 문을 사용할 필요가 없습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getDayOfWeek</span><span class="o">(</span><span class="kt">int</span> <span class="n">dayNum</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">switch</span> <span class="o">(</span><span class="n">dayNum</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">case</span> <span class="mi">1</span> <span class="o">-&gt;</span> <span class="s">"Monday"</span><span class="o">;</span>
        <span class="k">case</span> <span class="mi">2</span> <span class="o">-&gt;</span> <span class="s">"Tuesday"</span><span class="o">;</span>
        <span class="k">case</span> <span class="mi">3</span> <span class="o">-&gt;</span> <span class="s">"Wednesday"</span><span class="o">;</span>
        <span class="k">case</span> <span class="mi">4</span> <span class="o">-&gt;</span> <span class="s">"Thursday"</span><span class="o">;</span>
        <span class="k">case</span> <span class="mi">5</span> <span class="o">-&gt;</span> <span class="s">"Friday"</span><span class="o">;</span>
        <span class="k">case</span> <span class="mi">6</span> <span class="o">-&gt;</span> <span class="s">"Saturday"</span><span class="o">;</span>
        <span class="k">case</span> <span class="mi">7</span> <span class="o">-&gt;</span> <span class="s">"Sunday"</span><span class="o">;</span>
        <span class="k">default</span> <span class="o">-&gt;</span> <span class="s">"Invalid day"</span><span class="o">;</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="java-17-switch-statement">Java 17 switch Statement</h3>

<p>Java 17의 새로운 기능을 사용하면 상수 패턴을 사용하는 것 외에도 개발자가 변수 패턴과 유형 패턴을 사용할 수 있습니다.
변수 패턴을 사용하면 특정 값과 일치하여 변수에 할당할 수 있습니다.
유형 패턴을 사용하면 특정 유형의 값과 일치할 수 있습니다.</p>

<p>아래는 변수 및 유형 패턴의 사용을 보여주는 예입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getLength</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">switch</span> <span class="o">(</span><span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">case</span> <span class="nc">String</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="c1">// Variable pattern</span>
        <span class="k">case</span> <span class="nc">List</span> <span class="n">list</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">-&gt;</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="c1">// Type pattern</span>
        <span class="k">case</span> <span class="kc">null</span> <span class="o">-&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// null pointer excpetion</span>
        <span class="k">default</span> <span class="o">-&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">};</span>
<span class="o">}</span>
</code></pre></div></div>

<p>예제에서 switch 표현식은 인수로 전달된 개체와 일치합니다.
첫 번째 case 문은 변수 패턴을 사용하여 String 유형의 값과 일치시키고 이를 변수 ‘s’에 할당한 다음 문자열의 길이를 반환합니다.
두 번째 case 문은 유형 패턴을 사용하여 List 유형의 값과 일치시키고 이를 변수 ‘list’에 할당한 다음 리스트가 비어 있지 않은 경우 리스트의 크기를 반환합니다.
마지막 case 문은 null 값과 일치하고 0을 반환합니다.
기본 case 문은 -1을 반환합니다.</p>

<p>또한 상수 대신 ‘expressions’을 case 문에 사용할 수 있습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="k">switch</span> <span class="o">(</span><span class="n">num</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">case</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span> <span class="o">-&gt;</span> <span class="s">"Low"</span><span class="o">;</span>
    <span class="k">case</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span> <span class="o">-&gt;</span> <span class="s">"Medium"</span><span class="o">;</span>
    <span class="k">case</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">n</span> <span class="o">&gt;=</span> <span class="mi">7</span> <span class="o">&amp;&amp;</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="o">-&gt;</span> <span class="s">"High"</span><span class="o">;</span> <span class="c1">// expression pattern</span>
    <span class="k">default</span> <span class="o">-&gt;</span> <span class="s">"Invalid Value"</span><span class="o">;</span>
<span class="o">};</span>
</code></pre></div></div>
<p>이 예제에서는 switch 문에서 num 변수의 값을 확인합니다.
case 문은 if 키워드를 사용하여 표현식 레이블과 추가 조건을 허용하는 구문을 사용합니다.</p>

<p>아래는 예제는 ‘case lables’에 허용되는 유형의 예제입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getType</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">switch</span> <span class="o">(</span><span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">case</span> <span class="kc">null</span> <span class="o">-&gt;</span> <span class="s">"NULL value"</span><span class="o">;</span>
        <span class="k">case</span> <span class="nc">String</span> <span class="n">str</span> <span class="o">-&gt;</span> <span class="s">"It's a String"</span><span class="o">;</span>
        <span class="k">case</span> <span class="nc">Size</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="s">"Enum Type"</span><span class="o">;</span>
        <span class="k">case</span> <span class="nc">Point</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="s">"Records Type"</span><span class="o">;</span>
        <span class="k">case</span> <span class="nc">Employee</span> <span class="n">e</span> <span class="o">-&gt;</span> <span class="s">"Custom Object's Type"</span><span class="o">;</span>
        <span class="k">case</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">ai</span> <span class="o">-&gt;</span> <span class="s">"Array Type"</span><span class="o">;</span>
        <span class="k">case</span> <span class="nc">Employee</span> <span class="n">e</span> <span class="o">&amp;&amp;</span> <span class="n">e</span><span class="o">.</span><span class="na">getName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"John"</span><span class="o">)</span> <span class="o">-&gt;</span><span class="s">"Conditional Statement"</span><span class="o">;</span>
            <span class="k">default</span> <span class="o">-&gt;</span> <span class="s">"Unknown"</span><span class="o">;</span>
    <span class="o">};</span>

<span class="o">}</span>

<span class="kd">public</span> <span class="kd">enum</span> <span class="nc">Size</span> <span class="o">{</span>
    <span class="no">SMALL</span><span class="o">,</span> <span class="no">MEDIUM</span><span class="o">,</span> <span class="no">LARGE</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="n">record</span> <span class="nf">Point</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Employee</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Employee</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="2-pattern-matching-for-instanceof">2. Pattern matching For instanceof</h2>

<p>Java 17에서는 유형 확인에 필요한 코드를 단순화하는 데 도움이 되는 간단한 패턴 일치 방법인 ‘instanceof’ 패턴 일치 기능이 추가되었습니다.
‘Pattern matching’을 사용하여 성고하면 검사된 객체의 값을 새 변수로 할당할 수 있습니다.
그러면 이 새 변수를 다음 코드에서 사용할 수 있습니다. 
또한 개체를 예상 유형으로 casting 할 필요도 없습니다.</p>

<p>다음은 ‘instaceof’의 ‘pattern matching’을 사용하여 코드를 단순화하는 예입니다.</p>

<h3 id="traditional-instanceof">Traditional instanceof</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="k">instanceof</span> <span class="nc">String</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="java-17-instanceof">Java 17 instanceof</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">obj</span> <span class="k">instanceof</span> <span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이전 방식에서는 메소드를 사용하기 전에 객체를 String 유형으로 casting 해야 했습니다.
하지만 새로운 방식에서는 instanceof 키워드를 사용하여 객체를 String 유형으로 casting 할 필요가 없습니다.</p>

<h2 id="3-sealed-classes--interfaces">3. Sealed Classes &amp; Interfaces</h2>

<p>Sealed 클래스 및 인터페이스는 특정 클래스 또는 인터페이스를 확장하거나 구현하는 클래스 또는 인터페이스를 제한하는 기능입니다.</p>

<p>간단히 말해 ‘Sealed’ 클래스는 특정 클래스나 인터페이스를 확장하거나 구현할 수 있는 클래스나 인터페이스를 지정하여 작동합니다.
이는 상위 클래스나 인터페이스에서 ‘sealed’ 수정자를 사용한 다음 허용되는 하위 클래스를 지정하거나 ‘permits’ 키워드를 사용하여 클래스를 구현함으로써 달성됩니다.</p>

<p>Sealed 클래스는 JEP 360에서 제안되었으면 JDK 15에서 미리 보기 기능으로 제공되었습니다.
이는 일부 개선을 거쳐 다시 제안되었으며 JDK 16에서 미리보기 기능으로 제공되었습니다.
이제 JDK 17에서는 JDK 16의 변경 사항 없이 Sealed 클래스가 마무리되어 제공되었습니다</p>

<p>Sealed 클래스의 예를 통해 이해해 보겠습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">sealed</span> <span class="kd">class</span> <span class="nc">Shape</span> 
    <span class="n">permits</span> <span class="nc">Circle</span><span class="o">,</span> <span class="nc">Square</span><span class="o">,</span> <span class="nc">Triangle</span> <span class="o">{</span>
    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>예제에서는 ‘sealed’ 수정자를 사용하여 Shape 클래스가 봉인된 클래스임을 지정합니다.
그런 다음 ‘permits’ 키워드는 Circle, Square, Triangle 클래스가  Shape 클래스의 허용된 하위 클래스임을 지정합니다.</p>

<p>봉인된 클래스를 사용하면 Shape 클래스의 하위 클래스 Circle, Square, Triangle 클래스 만 허용되도록 할 수 있습니다.
Shape 클래스를 확장하려고 다른 시도를 하면 컴파일 오류가 발생합니다.</p>

<p>허용되는 하위 클래스를 지정하는 것 외에도 봉인된 클래스를 사용하면 개발자는 더 이상 확장할 수 없는 ‘non-sealed’ 또는 ‘final’ 하위 클래스를 정의할 수 있습니다.
다음은 봉인되지 않은 하위 클래스의 예 입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">non</span><span class="o">-</span><span class="n">sealed</span> <span class="kd">class</span> <span class="nc">Circle</span> <span class="kd">extends</span> <span class="nc">Shape</span> <span class="o">{</span>
    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>예제에서 ‘non-sealed’ 수정자는 Circle 클래스가 Shape 클래스의 봉인되지 않은 하위 클래스임을 지정하는 데 사용됩니다.
즉, Circle 클래스는 다른 클래스에 의해 확장될 수 있지만 자체적으로는 더 이상 확장될 수 없습니다.</p>

<p>또한 Sealed 클래스를 사용하면 개발자는 허용된 하위 클래스에서 구현할 수 있는 ‘허용된’ 인터페이스를 정의할 수 있습니다.
예는 다음과 같습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="n">sealed</span> <span class="kd">interface</span> <span class="nc">Shape</span> <span class="n">permits</span> <span class="nc">Circle</span><span class="o">,</span> <span class="nc">Square</span><span class="o">,</span> <span class="nc">Triangle</span> 
    <span class="kd">implements</span> <span class="nc">Drawable</span><span class="o">,</span> <span class="nc">Resizable</span> <span class="o">{</span>
    <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>예제에서 Shape 클래스는 허용된 하위 클래스에서 구현이 허용된 Drawable 및 Resizing 인터페이스를 구현합니다.</p>

<p>Sealed 클래스는 유형 안전성 향상, 코드 가독성 향상, 결합 감소 등 여러 가지 이점을 제공합니다.</p>

<h2 id="4-enhanced-pseudo-random-number-generators">4. Enhanced Pseudo-Random Number Generators</h2>

<p>‘Enhanced Pseudo-Random Number Generators’는 JDK 17에서 제공됩니다.
Java 애플리케이션에서 난수를 생성하는 데 사용할 수 있는 추가적인 PRNG(의사 난수 생성기)를 제공합니다.
새로운 PRNG는 Java의 기존 PRNG 보다 더 빠르고 안전하며 효율적입니다.</p>

<p>새로운 PRNG는 SplittableRandom 클래스의 인스턴스로 구현되며, 이는 분할되어 새 PRNG 인스턴스를 생성하는 데 사용될 수 있는 의사 난수 시컨스를 생성하는 방법을 제공합니다.
이를 통해 여러 스레드가 경합이 적은 난수를 독립적으로 생성할 수 있으므로 다중 스레드 애플리케이션의 성능이 향상될 수 있습니다.</p>

<p>예를 들어, 아래 코드는 SplittalbeRandom 클래스의 인스턴스를 사용하여 난수를 생성하는 방법을 보여줍니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SplittableRandom</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SplittableRandom</span><span class="o">();</span>
<span class="kt">int</span> <span class="n">randomNumber</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</code></pre></div></div>

<p>예제에서는 SplittableRandom 클래스의 인스턴스를 생성한 다음 nextInt() 메소드를 사용하여 난수를 생성합니다.
nextInt() 메소드는 Integer.MIN_VALUE 와 Integer.MAX_VALUE 사이에 균일하게 분포된 의사 난수 정수를 반환합니다.</p>

<p>SplittableRandom 클래스를 사용하여 범위 내에서 난수를 생성할 수도 있습니다.
예를 들어, 다음 코드는 1과 100 사이의 난수를 생성하는 방법을 보여줍니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SplittableRandom</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SplittableRandom</span><span class="o">();</span>
<span class="n">intRandomNumberRange</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">101</span><span class="o">);</span>
</code></pre></div></div>

<p>예제에서는 nextInt(int bound) 메소드를 사용하여 1 이상 101 미만 사이에 균일하게 분포된 의사 난수 정수를 생성합니다.</p>

<p>SplittableRandom 클래스의 또 다른 유용한 기능은 PRNG를 분할하고 독립적인 난수 시쿽스를 생성하는 새 인스턴스를 생성할 수 있다는 것입니다.
예를 들어 아래 코드는 SplittableRandom 클래스의 인스턴스를 사용하여 새로운 PRNG 인스턴스를 생성하는 방법을 보여줍니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SplittableRandom</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SplittableRandom</span><span class="o">();</span>
<span class="nc">SplittableRandom</span> <span class="n">newRandom</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">split</span><span class="o">();</span>
</code></pre></div></div>
<p>예제에서는 SplittableRandom 클래스의 새 인스턴스를 만든 다음 이를 분할하여 독립적인 난수 시퀀스를 생성하는 새 인스턴스를 만듭니다.
두 인스턴스를 별도의 스레드에서 사용하여 경합이 적은 난수를 생성할 수 있습니다.</p>

<h2 id="5-restore-always-strict-floating-point-semantics">5. Restore Always-Strict Floating-Point Semantics</h2>

<p>Java 17에서는 ‘Restore Always-Strict Floating-Point Semantics’ 기능이 추가되었습니다.
이 기능은 Java 애플리케이션에서 부동 소수점 연산의 일관성과 신뢰성을 향상시키는 것을 목표로 합니다.
이는 정밀도가 중요한 응용 분야에서 필요할 수 있습니다.</p>

<p>Java 17 이전에는 Java의 일부 부동 소수점 작업이 IEEE 754 부동 소수점 표준을 항상 엄격하게 준수하지 않았으므로 다양한 플랫폼과 아키텍처에서 일관되지 않은 동작이 발생할 수 있습니다.
새로운 기능을 통해 Java는 기본적으로 항상 가장 엄격한 부동 소수점 의미 체계를 사용하므로 다양한 플랫폼에서 보다 예측 가능하고 일관된 동작이 가능합니다.</p>

<p>예를 들어 어떻게 작동하는지 살펴보겠습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">a</span> <span class="o">=</span> <span class="mf">0.1</span><span class="o">;</span>
<span class="kt">double</span> <span class="n">b</span> <span class="o">=</span> <span class="mf">0.2</span><span class="o">;</span>
<span class="kt">double</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
</code></pre></div></div>
<p>이 예에서는 두 개의 double a와 b를 추가하고 결과를 c에 저장합니다.
Java 17 이전에는 부동 소수점 연산에서 발생할 수 있는 반올림 오류로 인해 연산의 결과는 0.30000000000000004와 같이 예상치 못한 값이 될 수 있습니다.
그러나 Java 17의 새로운 기능을 사용하면 결과는 IEEE 754 부동 소수점 표준에 따라 0.3이 됩니다.</p>

<p>이는 다양한 플랫폼과 아키텍처 전반에 걸쳐 보다 일관된 동작을 가능하게 하며, 이는 정밀도가 중요한 과학 및 금융 애플리케이션에서 특히 중요할 수 있습니다.
이 기능으로 인해 일부 부동 소수점 연산의 성능이 약간 저하될 수 있다는 점은 주목할 가치가 있지만 이는 일반적으로 부동 소수점 연산의 일관성과 신뢰성 향상에 대한 대가로 받아들여질 수 있습니다.</p>

<h2 id="6-strong-encapsulation-for-jdk-internals">6. Strong Encapsulation for JDK Internals</h2>

<p>Java 17에서는 ‘Strong Encapsulation for JDK Internals’ 기능이 추가되었습니다.
이는 API 캡슐화를 더욱 향상시키는 것을 목표로 합니다.
목표는 타사 애플리케이션 및 라이브러리의 내부 API 사용을 제한하여 Java 애플리케이션의 보안과 안정성을 향상시키는 것입니다.</p>

<p>내부 API는 향후 JDK 릴리스에서 예고 없이 변경되거나 제거될 수 있으므로 타사 응용 프로그램에서 사용하기 위한 것이 아닙니다.
그러나 일부 타사 라이브러리 및 애플리케이션은 여전히 이러한 내부 API에 의존하므로 호환성 문제 및 보안 취약성이 발생할 수 있습니다.</p>

<p>Java 17의 ‘Strong Encapsulation for JDK Internals’ 기능을 사용하면 내부 API에 대한 액세스가 더 제한 됩니다.
내부 API에서 액세스하려고 시도하는 모든 코드는 특정 API에 따라 경고 메시지 또는 컴파일 오류를 발생시킵니다.</p>

<p>이 기능이 어떻게 작동하는지 예를 들어 살펴보겠습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sun.misc.Unsafe</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Unsafe</span> <span class="n">unsafe</span> <span class="o">=</span> <span class="nc">Unsafe</span><span class="o">.</span><span class="na">getUnsafe</span><span class="o">();</span>
    <span class="kt">long</span> <span class="n">value</span> <span class="o">=</span> <span class="n">unsafe</span><span class="o">.</span><span class="na">allocateMemory</span><span class="o">(</span><span class="mi">1024</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 예에서는 타사 응용 프로그램에서 사용할 수 없는 내부 API인 sun.misc.Unsafe 클래스를 사용하려고 합니다.
Java 17 이전에는 이 코드가 문제 없이 컴파일되고 실행되었습니다.
그러나 새로운 기능을 사용하면 sun.misc.Unsafe 클래스에 대한 액세스가 이제 강력하게 캡슐화되므로 이 코드에서 컴파일 오류가 발생합니다.</p>

<p>이 문제를 해결하기 위해 타사 애플리케이션에서 사용하도록 고안된 대체 API를 사용할 수 있습니다.
예를 들어 java.nio.ByteBuffer 클래스를 사용하여 메모리를 할당할 수 있습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.nio.ByteBuffer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">ByteBuffer</span> <span class="n">buffer</span> <span class="o">=</span> <span class="nc">ByteBuffer</span><span class="o">.</span><span class="na">allocateDirect</span><span class="o">(</span><span class="mi">1024</span><span class="o">);</span>
    <span class="kt">long</span> <span class="n">value</span> <span class="o">=</span> <span class="o">((</span><span class="n">sun</span><span class="o">.</span><span class="na">nio</span><span class="o">.</span><span class="na">ch</span><span class="o">.</span><span class="na">DirectBuffer</span><span class="o">)</span> <span class="n">buffer</span><span class="o">).</span><span class="na">address</span><span class="o">();</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 업데이트된 예에서는 sun.misc.Unsafe 클래스 대신 ByteBuffer 클래스를 사용하여 메모리를 할당합니다.
그런 다음 ByteBuffer를 sun.nio.ch.DirectBuffer로 캐스팅하고 해당 address() 메소드를 사용하여 메모리 주소를 가져옵니다.</p>

<h2 id="7-new-macos-rendering-pipeline">7. New macOS Rendering Pipeline</h2>

<p>Java 17의 ‘New macOS Rendering Pipeline’ 기능은 macOS에서 Java 애플리케이션의 그래픽 렌더링 성능을 향상시키는 것을 목표로 합니다.
이 파이프 라인은 macOS의 그래픽 하드웨어에 대한 낮은 수준의 액세스를 제공하는 Apple Metal API를 사용하여 더 빠르고 부드러운 그래픽 렌더링을 제공합니다.</p>

<p>Java 17 이전에는 macOS의 Java 애플리케이션이 OpenGL 파이프라인을 사용했는데, 이는 새로운 Metal 파이프 라인보다 느리고 안정성이 낮을 수 있습니다.
Metal 파이프 라인은 Java 애플리케이션이 macOS의 그래픽 하드웨어에 직접 액세스할 수 있도록 하여 더 나은 성능과 안정성을 제공하여 더 부드럽고 반응성이 뛰어난 그래픽 렌더링을 제공합니다.</p>

<p>예를 통하여 확인해 보겠습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.awt.Color</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.Graphics</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.Graphics2D</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.swing.JFrame</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.swing.JPanel</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyPanel</span> <span class="kd">extends</span> <span class="nc">JPanel</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">paintComponent</span><span class="o">(</span><span class="nc">Graphics</span> <span class="n">g</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">.</span><span class="na">paintComponent</span><span class="o">(</span><span class="n">g</span><span class="o">);</span>
    <span class="nc">Graphics2D</span> <span class="n">g2d</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Graphics2D</span><span class="o">)</span> <span class="n">g</span><span class="o">;</span>
    <span class="n">g2d</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="nc">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">);</span>
    <span class="n">g2d</span><span class="o">.</span><span class="na">fillRect</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">50</span><span class="o">,</span> <span class="mi">50</span><span class="o">);</span>
  <span class="o">}</span>
  
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">JFrame</span> <span class="n">frame</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JFrame</span><span class="o">();</span>
    <span class="n">frame</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyPanel</span><span class="o">());</span>
    <span class="n">frame</span><span class="o">.</span><span class="na">setSize</span><span class="o">(</span><span class="mi">200</span><span class="o">,</span> <span class="mi">200</span><span class="o">);</span>
    <span class="n">frame</span><span class="o">.</span><span class="na">setDefaultCloseOperation</span><span class="o">(</span><span class="nc">JFrame</span><span class="o">.</span><span class="na">EXIT_ON_CLOSE</span><span class="o">);</span>
    <span class="n">frame</span><span class="o">.</span><span class="na">setVisible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 예에서는 Graphics2D 클래스를 사용하여 빨간색 직사각형을 그리는 간단한 JPanel을 만들었습니다.
Java 17 이전에는 이 코드가 OpenGL 렌더링 파이프라인을 사용하여 직사각형을 그렸습니다.
그러나 새로운 기능을 사용하면 이 코드는 macOS에서 Metal 렌더링 파이프라인을 사용하므로 더 빠르고 부드러운 그래픽 렌더링이 가능해집니다.</p>

<p>새로운 Metal 파이프라인은 복잡한 그래픽이나 애니메이션을 사용하는 애플리케이션에서 특히 눈에 띄게 나타납니다.
이전 OpenGL 파이프라인에 비해 상당한 성능 향상을 제공할 수 있기 때문입니다.</p>

<h2 id="8-deprecate-the-applet-api-for-removal">8. Deprecate the Applet API for Removal</h2>

<p>Java 17의 ‘Deprecate the Applet for Removal’ 기능에는 Applet API를 사용 중단으로 표시하는 작업이 포함됩니다.
이는 더 이상 사용이 권장되지 않으며 향후 Java 버전에서 제거될 수 있음을 의미합니다.
Applet API는 웹 브라우저 내에서 실행되는 작은 응용 프로그램인 Java Applet을 만드는 데 사용됩니다.</p>

<p>다음은 Java에서 Applet API를 사용하는 방법의 예 입니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.applet.Applet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.Graphics</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplet</span> <span class="kd">extends</span> <span class="nc">Applet</span> <span class="o">{</span>
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">paint</span><span class="o">(</span><span class="nc">Graphics</span> <span class="n">g</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">g</span><span class="o">.</span><span class="na">drawString</span><span class="o">(</span><span class="s">"Hello, world!"</span><span class="o">,</span> <span class="mi">50</span><span class="o">,</span> <span class="mi">25</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 예에서는 Applet 클래스를 확장하는 MyApplet이라는 클래스를 정의했습니다.
‘Hello world!’ 문자열을 그리기 위해 paint() 메소드를 재정의 하였습니다.</p>

<p>Applet API의 사용이 중단됨에 따라 웹 기반 애플리케이션 개발을 위해 Java Web Start, JavaFX 또는 HTML5와 같은 대체 기술을 사용하는 것이 좋습니다.
개발자는 Applet API의 사용을 제거하고 향후 Java 버전과 애플리케이션의 호환성을 보장하기 위해 권장되는 대안을 채택하도록 코드를 업데이트해야 합니다.</p>]]></content><author><name>Young Hwang</name></author><category term="java" /><category term="java" /><category term="java 17" /><category term="JDK 17" /><category term="switch" /><category term="sealed" /><category term="SplittableRandom" /><summary type="html"><![CDATA[Spring Boot 3.0 출시 이후 Java 17 버전이 필수가 되었습니다. 이로 인해 Java 17의 기능에 대한 이해가 중요하게 되었습니다.]]></summary></entry><entry><title type="html">Redis Architecture</title><link href="/redis/2024/02/19/redis-architecture.html" rel="alternate" type="text/html" title="Redis Architecture" /><published>2024-02-19T00:00:00+00:00</published><updated>2024-02-19T00:00:00+00:00</updated><id>/redis/2024/02/19/redis-architecture</id><content type="html" xml:base="/redis/2024/02/19/redis-architecture.html"><![CDATA[<h2 id="redis-architecture">Redis Architecture</h2>

<p>아래의 그림은 Redis 서버의 기본 아키텍처(Redis Standalone Architecture) 구조이며 3가지 영역으로 구성되어 있습니다.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiZmxvd2NoYXJ0IExSXG5zdWJncmFwaCBcIkRhdGEgU3RydWN0dXJlXCJcbmExW1wiUmVzaWRlbnQgQXJlYVxuKFdvcmtpbmdTZXQpXCJdXG5zdWJncmFwaCBtZW1vcnlcbmIxW2FkaXN0XVxuYjJbZGljdF1cbmIzW3Nkc11cbmI0W3ppcG1hcF1cbmVuZFxuZW5kXG5pZDAoW1wiQ2xpZW50IFByb2Nlc3NcbihyZWRpcy1jbGkuZXhlKVwiXSlcbmlkMShbXCJTdWItVGhyZWFkIDJcbkJJTy1BT0YtUkVTVk5DXCJdKVxuaWQyKFtcIlN1Yi1UaHJlYWQgMVxuQklPLUNMT1NFLUZJTEVcIl0pXG5pZDMoW1wiU3ViLVRocmVhZCAzXG5CSU8tQU9GLVJFU1ZOQ1wiXSlcbmlkNChbXCJTZXJ2ZXIgcHJvY2Vzc1xuKE1haW4gVGhyZWFkKVwiXSlcbmExIDwtLT4gaWQwXG5hMSA8LS0-IGlkMVxuaWQxIDwtLT4gZGIxXG5hMSA8LS0-IG1lbW9yeVxubWVtb3J5IDwtLT4gaWQyXG5pZDIgPC0tPiBkYjFcbm1lbW9yeSA8LS0-IGlkM1xubWVtb3J5IDwtLT4gaWQ0XG5pZDMgPC0tPiBkYjJcbmlkNCA8LS0-IGRiMlxuZGIxWyhBb2YgRmlsZSldXG5kYjJbKER1bXAgRmlsZSldIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0" /></p>

<ul>
  <li>Memory 영역</li>
  <li>File 영역</li>
  <li>Process 영역</li>
</ul>

<ol>
  <li>Memory 영역</li>
</ol>

<ul>
  <li>
    <p>Resident Area</p>

    <p>사용자가 Redis 서버에 접속해서 처리하는 모든 데이터가 가장 먼저 저장되는 영역입니다.
실제 작업이 수행되는 공간이고 WorkingSet 영역이라고 표현합니다.</p>
  </li>
  <li>
    <p>Data Structure</p>

    <p>Redis 서버를 운영하다 보면 발생하는 다양한 정보와 서버 서버 상태를 모니터링하기 위해 수집한 상태 정보를 저장하고 관리하기 위한 메모리 공간이 필요합니다.
이러한 정보들은 Redis 서버의 메모리 영역에 저장되며, 이러한 정보들을 Data Structure 라고 표현합니다.</p>
  </li>
</ul>

<ol>
  <li>File 영역</li>
</ol>

<ul>
  <li>
    <p>AOF(Append Only File)</p>

    <p>Redis는 모든 데이터를 메모리 상에 저장하고 관리하는 In-Memory 기반의 데이터 처리 기술을 제공합니다.
하지만 중요한 데이터의 경우 사용자의 필요에 따라 지속적으로 저장해야 할 필요가 있는데 이를 위해 제공되느 디스크 영역이 AOF(Append Only File) 입니다.(스냅샷 데이터)</p>
  </li>
  <li>
    <p>DUMP File</p>

    <p>AOF 파일과 같이 사용자 데이터를 디스크 상에 저장할 수 있지만 소량의 데이터를 일시적으로 저장할 때 사용하는 파일입니다.</p>
  </li>
</ul>

<ol>
  <li>Process 영역</li>
</ol>

<ul>
  <li>
    <p>Server Process</p>

    <p>redis-server.exe 또는 redis-sentinel.exe 실행 코드에 의해 활성화되는 프로세스를 서버 프로세스라고 하며 Redis 인스턴스를 관리해 주며 사용자가 요구한 작업을 수행하는 프로세스 입니다.
Redis Server 프로세스는 4개의 멀티 쓰레드로 구성되는데 main thread, sub thread 1(BIO-Close-File), sub thread 2(BIO-AOF-Resync), sub thread 3(BIO-Lazy-Free)로 구성되어 있습니다.</p>
  </li>
  <li>
    <p>Client Process</p>

    <p>redis-cli.exe 또는 사용자 애플리케이션에 의해 실행되는 명령어를 실행하기 위해 제공되는 프로세스 입니다.</p>
  </li>
</ul>

<h1 id="redis-memory-확인">Redis Memory 확인</h1>

<p>Redis 서버의 메모리 사용량을 확인하기 위해서는 redis-cli를 실행하고 다음과 같은 명령어를 입력하면 됩니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>redis-cli <span class="nt">-p</span> 5000

<span class="o">&gt;</span> info memory
used_memory:29261104 
used_memory_human:27.91M &lt;- Redis 서버가 현재 사용하고 있는 전체 메모리<span class="o">(</span>used_memory_overhead + used_memory_dataset<span class="o">)</span>
used_memory_rss:42463232
used_memory_rss_human:40.50M &lt;- Redis 서버가 사용중인 실제 메모리 크기<span class="o">(</span>RSS, Resident Set Size<span class="o">)</span>
used_memory_peak:29276336
used_memory_peak_human:27.92M &lt;- Redis 서버의 이전에 가장 많이 사용했던 메모리 최대치
used_memory_peak_perc:99.95% &lt;- Redis 서버가 시작된 이후 가장 많이 사용했던 메모리 대비 현재 사용 중인 메모리의 비율을 퍼센트로 표현
used_memory_overhead:1379680 &lt;- Redis 서버가 동작하기 위해 필요한 메모리<span class="o">(</span>byte<span class="o">)</span>
used_memory_startup:898744 &lt;- 최초 할당 되었던 메모리 크기<span class="o">(</span>byte<span class="o">)</span>
used_memory_dataset:27881424 &lt;- 사용자 데이터가 저장된 메모리 크기<span class="o">(</span>byte<span class="o">)</span>
used_memory_dataset_perc:98.30% &lt;- Redis 서버에서 사용자 데이터를 저장하는데 사용하는 메모리가 전체 사용 메모리<span class="o">(</span>used_memory<span class="o">)</span> 대비 차지하는 비율을 퍼센트로 표현
allocator_allocated:30833208 &lt;- Redis 서버가 메모리 할당자로부터 할당받은 메모리의 총량<span class="o">(</span>byte<span class="o">)</span>
allocator_active:38207488 &lt;- Redis 서버가 메모리 할당자로부터 실제로 할당받아 현재 활성화된 메모리의 총량<span class="o">(</span>byte<span class="o">)</span>
allocator_resident:40632320 &lt;- Redis 서버가 메모리 할당자로부터 할당받아서 시스템에 의해 실제로 사용되고 있는 메모리의 총룡<span class="o">(</span>byte<span class="o">)</span>
total_system_memory:8222203904  
total_system_memory_human:7.66G &lt;- Redis 서버가 실행되고 있는 시스템의 총 메모리 크기
used_memory_lua:31744 
used_memory_vm_eval:31744 &lt;- Redis 서버에서 Lua 스크립트를 평가<span class="o">(</span>evaluate<span class="o">)</span>하는 데 사용되는 메모리의 양
used_memory_lua_human:31.00K &lt;- Redis 서버에서 Lua 스크립트 엔진이 사용하는 메모리의 양<span class="o">(</span>byte<span class="o">)</span>
used_memory_scripts_eval:0 &lt;- Redis 서버에서 Lua 스크립트를 평가<span class="o">(</span>evaluate<span class="o">)</span>하는 데 사용되는 메모리의 양
number_of_cached_scripts:0
number_of_functions:0
number_of_libraries:0
used_memory_vm_functions:32768
used_memory_vm_total:64512
used_memory_vm_total_human:63.00K
used_memory_functions:184
used_memory_scripts:184
used_memory_scripts_human:184B
maxmemory:0
maxmemory_human:0B &lt;- Redis 설정에서 사용할 수 있는 최대 메모리 크기, 0이면 제한 없음, 0이 아닌 경우 maxmemory-policy에 따라 메모리를 관리 
maxmemory_policy:noeviction &lt;<span class="nt">-Redis</span> 설정에서 메모리가 maxmemory로 설정된 값에 도달했을 때 어떻게 처리할지를 결정하는 설정 
allocator_frag_ratio:1.24
allocator_frag_bytes:7374280
allocator_rss_ratio:1.06
allocator_rss_bytes:2424832
rss_overhead_ratio:1.05
rss_overhead_bytes:1830912
mem_fragmentation_ratio:1.45 &lt;<span class="nt">-Redis</span> 서버의 메모리 파편화 비율 
mem_fragmentation_bytes:13202328
mem_not_counted_for_evict:0
mem_replication_backlog:0
mem_total_replication_buffers:0
mem_clients_slaves:0
mem_clients_normal:22400
mem_cluster_links:0
mem_aof_buffer:0
mem_allocator:jemalloc-5.3.0
active_defrag_running:0
lazyfree_pending_objects:0
lazyfreed_objects:0
</code></pre></div></div>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 실시간 사용 중인 메모리 크기 확인
<span class="nv">$ </span>redis-cli <span class="nt">-p</span> 5000 <span class="nt">-r</span> 100 <span class="nt">-i</span> 1 info | <span class="nb">grep </span>used_memory_human:
used_memory_human:27.91M
used_memory_human:27.91M
...
^C // Ctrl + C 중단
</code></pre></div></div>

<p>메모리 영역에 대한 HIT와 MISSES에 대한 확인은 다음과 같이 확인할 수 있습니다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>redis-cli <span class="nt">-p</span> 5000

<span class="o">&gt;</span> info stats
<span class="c"># Stats</span>
total_connections_received:2
total_commands_processed:25
instantaneous_ops_per_sec:5
total_net_input_bytes:732
total_net_output_bytes:7785
total_net_repl_input_bytes:0
total_net_repl_output_bytes:0
instantaneous_input_kbps:0.17
instantaneous_output_kbps:1.89
instantaneous_input_repl_kbps:0.00
instantaneous_output_repl_kbps:0.00
rejected_connections:0
sync_full:0
sync_partial_ok:0
sync_partial_err:0
expired_keys:0
expired_stale_perc:0.00
expired_time_cap_reached_count:0
expire_cycle_cpu_milliseconds:2172
evicted_keys:0
evicted_clients:0
total_eviction_exceeded_time:0
current_eviction_exceeded_time:0
keyspace_hits:0 &lt;- Redis에서 키 조회 요청이 성공한 횟수, 값이 높을수록 Redis에서 데이터 조회가 빈번하게 성공하고 있다는 것을 의미
keyspace_misses:0 &lt;<span class="nt">-Redis</span>에서 키 조회 요청이 실패한 횟수, 값이 높을수록 Redis에서 데이터 조회가 빈번하게 실패하고 있다는 것을 의미
pubsub_channels:0
pubsub_patterns:0
pubsubshard_channels:0
latest_fork_usec:0
total_forks:0
migrate_cached_sockets:0
slave_expires_tracked_keys:0
active_defrag_hits:0
active_defrag_misses:0
active_defrag_key_hits:0
active_defrag_key_misses:0
total_active_defrag_time:0
current_active_defrag_time:0
tracking_total_keys:0
tracking_total_items:0
tracking_total_prefixes:0
unexpected_error_replies:0
total_error_replies:0
dump_payload_sanitizations:0
total_reads_processed:25
total_writes_processed:23
io_threaded_reads_processed:0
io_threaded_writes_processed:0
reply_buffer_shrinks:3
reply_buffer_expands:1
eventloop_cycles:138785
eventloop_duration_sum:34076667
eventloop_duration_cmd_sum:711
instantaneous_eventloop_cycles_per_sec:13
instantaneous_eventloop_duration_usec:222
acl_access_denied_auth:0
acl_access_denied_cmd:0
acl_access_denied_key:0
acl_access_denied_channel:0
</code></pre></div></div>

<p>Redis 서버 프로세스와 쓰레드 구조를 모니터링하는 방법입니다.
Redis 서버 프로세스는 4개의 멀티 쓰레드로 구성되며 각 쓰레드의 역할은 다음과 같습니다.</p>

<ol>
  <li>
    <p>Main Thread
  Redis 서버에 수행되는 대부분의 명령어와 이벤트를 처리하는 역할을 수행합니다.</p>
  </li>
  <li>
    <p>Sub-Thread 1(BIO-Close-File)
  쓰레드 1은 AOF(Append Only File)에 데이터를 Rewrite 할 때 기존 파일은 Close하고 새로운 AOF 파일에 Write하는 역할을 수행합니다.</p>
  </li>
  <li>
    <p>Sub-Thread 2(BIO-AOF-Resync)
  쓰레드 2는 AOF 쓰기 작업을 수행할 때 사용됩니다.</p>
  </li>
  <li>
    <p>Sub-Thread 3(BIO-Lazy-Free)
  쓰레드3은 UNLINK, FLUSHALL, FLUSHDB 명령어를 수행할 때 빠른 성능을 보장하기 위해 백그라운드에서 실행 됩니다.</p>
  </li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// redis multi-thread 확인
<span class="nv">$ </span>ps <span class="nt">-eLF</span> | <span class="nb">grep </span>redis

// system call 확인
<span class="nv">$ </span>strace <span class="nt">-p</span> 16310
</code></pre></div></div>

<h2 id="system-사양">System 사양</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: center">내용</th>
      <th style="text-align: center">최소 사양</th>
      <th style="text-align: center">권장 사양</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"># of node per cluster</td>
      <td style="text-align: center">2 Cores</td>
      <td style="text-align: center">&gt;= 3 Cores</td>
    </tr>
    <tr>
      <td style="text-align: center"># of cores per node</td>
      <td style="text-align: center">3 Cores</td>
      <td style="text-align: center">&gt;= 8 Cores</td>
    </tr>
    <tr>
      <td style="text-align: center">RAM</td>
      <td style="text-align: center">15GB</td>
      <td style="text-align: center">&gt;= 30GB</td>
    </tr>
    <tr>
      <td style="text-align: center">Storage</td>
      <td style="text-align: center">SATA(RAM 크기 * 10)</td>
      <td style="text-align: center">40GB</td>
    </tr>
    <tr>
      <td style="text-align: center">Persistentce Storage</td>
      <td style="text-align: center">RAM 크기 * 3</td>
      <td style="text-align: center">&gt;= RAM 크기 * 6 \n (&gt;= RAM + Flash * 5)</td>
    </tr>
    <tr>
      <td style="text-align: center">Network</td>
      <td style="text-align: center">1G</td>
      <td style="text-align: center">&gt;= 10G</td>
    </tr>
  </tbody>
</table>

<p>서버의 사양을 어떻게 결정할 것인가?</p>

<h2 id="노드-수-of-node-per-cluster">노드 수(# of node per cluster)</h2>

<p>하나의 standalone 서버를 구축하는 경우에 master 서버 1대, slave 서버 1대 그리고 FailOver와 Load Balancing을 위한 Sentinel 서버 1대를 구축하는 경우 최소 3대의 서버가 요구 됩니다.</p>]]></content><author><name>Young Hwang</name></author><category term="redis" /><category term="redis" /><category term="architecture" /><summary type="html"><![CDATA[Redis Architecture]]></summary></entry><entry><title type="html">Redis Data Model</title><link href="/redis/2024/02/16/redis-data-model.html" rel="alternate" type="text/html" title="Redis Data Model" /><published>2024-02-16T00:00:00+00:00</published><updated>2024-02-16T00:00:00+00:00</updated><id>/redis/2024/02/16/redis-data-model</id><content type="html" xml:base="/redis/2024/02/16/redis-data-model.html"><![CDATA[<p>Redis DB에서 설계 가능한 데이터 모델 유형들과 실제 구현 방법에 대해 정리해 보겠습니다.
Redis 서버에서 설계할 수 있는 데이터 모델 유형은 크게 5가지가 있습니다.</p>

<ul>
  <li>Hash-Hash Data Model</li>
  <li>Hash-List Data Model</li>
  <li>List-List Data Model</li>
  <li>Set/Sorted Set-List Data Model</li>
  <li>HyperLogLogs Data Model</li>
</ul>

<h2 id="hash-hash-data-model">Hash-Hash Data Model</h2>

<p>주문 테이블과 운송 테이블은 대표적인 Hash-Hash 테이블로 설계될 수 있는 테이블 구조입니다.
이를 Redis 데이터 모델 표기법(Notation)으로 표현하면 다음과 같습니다.</p>

<p>아래의 두 직사각형은 주문 테이블과 운송 테이블로 [Object 명]과 [Key]로 표현 할 수 있습니다.
주문 테이블은 order:order_id로 운송 테이블은 translate:order_id로 표기할 수 있습니다.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiY2xhc3NEaWFncmFtXG5jbGFzcyBgT3JkZXI6T3JkZXJfaWRgIHtcbm9yZGVyX2lkXG5jdXN0b21lcl9uYW1lXG5lbXBfbmFtZVxudG90YWxcbnBheW1lbnRcbn1cbmNsYXNzIGBUcmFuc2xhdGU6T3JkZXJfaWRgIHtcbnRyYW5zbGF0ZV9pZFxudHJhbnNsYXRlX2RhdGVcbnRyYW5zbGF0ZV9zdGF0dXNcbn0iLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9fQ" /></p>

<p>이와 같은 구조를 Redis DB의 Hash-Hash 데이터 모델이라고 표현할 수 있습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> hmset order:201809123 customer_name <span class="s2">"Wonman &amp; KT"</span> emp_name <span class="s2">"Magie"</span> total 45000 payment <span class="s2">"Credit"</span>
<span class="o">&gt;</span> hgetall order:201809123
<span class="o">&gt;</span> hmset translate:201809123 translate_id 12670 translate_date <span class="s2">"2018-09-23"</span> translate_status <span class="s2">"Complete"</span>
<span class="o">&gt;</span> hgetall translate:201809123
</code></pre></div></div>

<h2 id="hash-list-data-model">Hash-List Data Model</h2>

<p>주문 테이블과 주문 상세 테이블은 대표적인 Hash-List 테이블로 설계될 수 있는 테이블 구조입니다.
이를 Redis 데이터 모델 표기법(Notation)으로 표현하면 다음과 같습니다.</p>

<p>아래의 두 직사각형은 주문 테이블과 주문 상세 테이블로 [Object 명]과 [Key]로 표현 할 수 있습니다.
주문 테이블은 order:order_id로 주문 상세 테이블은 order_detail:order_id로 표기할 수 있습니다.
이를 Redis DB의 테이블로 생성하고 List 데이터 구조로 관리할 수 있습니다.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiY2xhc3NEaWFncmFtXG5jbGFzcyBgT3JkZXI6T3JkZXJfaWRgIHtcbm9yZGVyX2lkXG5jdXN0b21lcl9uYW1lXG5lbXBfbmFtZVxudG90YWxcbnBheW1lbnRcbn1cbmNsYXNzIGBPcmRlcl9EZXRhaWw6T3JkZXJfaWRgIHtcbml0ZW1faWRcbnByb2R1Y3RfaWRcbnF0eVxucHJpY2Vcbn0iLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9fQ" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> hmset order:201809123 customer_name <span class="s2">"Wonman &amp; KT"</span> emp_name <span class="s2">"Magie"</span> total 45000 payment <span class="s2">"Credit"</span>
<span class="o">&gt;</span> hgetall order:201809123
<span class="o">&gt;</span> lpush order_detail:201809123 <span class="s2">"&lt;item_id&gt;1&lt;/item_id&gt;&lt;product_id&gt;1001&lt;/product_id&gt;&lt;qty&gt;1&lt;/qty&gt;&lt;price&gt;1000&lt;/price&gt;"</span>
<span class="o">&gt;</span> lpush order_detail:201809123 <span class="s2">"&lt;item_id&gt;2&lt;/item_id&gt;&lt;product_id&gt;1003&lt;/product_id&gt;&lt;qty&gt;2&lt;/qty&gt;&lt;price&gt;4000&lt;/price&gt;"</span>
<span class="o">&gt;</span> lrange order_detail:201809123 0 <span class="nt">-1</span>
</code></pre></div></div>

<h2 id="list-list-data-model">List-List Data Model</h2>

<p>제품 테이블과 카테고리 테이블은 대표적인 List-List 테이블로 설계될 수 있는 테이블 구조입니다.
이 데이터 구조는 관계형 데이터베이스에는 존재하지 않는 N:M 관계 구조로 표현할 수 있습니다.</p>

<p>아래의 두 직사각형은 제품 테이블과 카테고리 테이블로 [Object 명]과 [Key]로 표현 할 수 있습니다.
제품 테이블은 product:prod_id로 카테고리 테이블은 category:category_id로 표기할 수 있습니다.
제품 테이블의 prod_no와 카테고리 테이블의 category_id는 연결고리(Link)로 사용되고 있습니다.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiY2xhc3NEaWFncmFtXG5jbGFzcyBgUHJvZHVjdDpQcm9kX2lkYCB7XG5wcm9kX25hbWVcbmNhdGVnb3J5X2lkXG5jYXRlZ29yeV9uYW1lXG59XG5jbGFzcyBgQ2F0ZWdvcnk6Q2F0ZWdvcnlfaWRgIHtcbmNhdGVnb3J5X25hbWVcbnByb2Rfbm9cbnByb2RfbmFtZVxufSIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0In19" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> lpush product:1001 <span class="s2">"prod_name: 'Apple', category: [cname1: c1000, cname2: c2000]"</span>
<span class="o">&gt;</span> lrange product:1001 0 <span class="nt">-1</span>
<span class="o">&gt;</span> lpush category:c1000 <span class="s2">"category_name: 'Tablet', products: [pname1: 1001, pname2: 1002]"</span>
<span class="o">&gt;</span> lrange category:c1000 0 <span class="nt">-1</span>
</code></pre></div></div>

<h2 id="setsorted-set-list-data-model">Set/Sorted Set-List Data Model</h2>

<p>일반적으로 관계형 DB는 하나의 테이블과 관계되는 상대 테이블을 식별키(Priamry Key)와 외부키(Foreign Key)로 표현할 수 있으며 이를 통해 데이터 무결성을 보장할 수 있는 데이터 구조로 설계할 수 있습니다.
그런데 하나의 테이블과 관계되는 상대 테이블이 자기 자신이 될 수도 있는 데이터 구조를 계층 구조(Tree Structure) 테이블이라고 표현합니다.
Redis DB에서도 이와 같은 데이터 구조를 설계할 수 있는데 이를 Set/Sorted Set 테이블이라고 합니다.</p>

<p>아래 그림에서 왼쪽 직사각형 도형은 직원 테이블이며 오른쪽은 주문 테이블 입니다.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiY2xhc3NEaWFncmFtXG5jbGFzcyBgRW1wbG95ZWVgIHtcbmVtcGxveWVlX2lkXG5lbXBsb3llZV9uYW1lXG5lbXBsb3llZV9wb3NpdGlvblxuZW1wbG95ZWVfc2FsYXJ5XG5lbXBsb3llZV9oaXJlX2RhdGVcbnBhcmVudF9pZFxuY2hpbGRfaWRcbn1cbmNsYXNzIGBPcmRlcjpvcmRlcl9pZGAge1xub3JkZXJfZGF0ZVxuY3VzdG9tZXJfbmFtZVxuZW1wX2lkXG50b3RhbFxucGF5bWVudFxuZW1wbG95ZWVfaWRcbn0iLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9fQ" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> sadd employee <span class="s2">"employee_id:1001 employee_name: 'Wonman', employee_position: 'CEO', employee_salary: 1000000, employee_hire_date: '2018-01-01', parent_id: 0, child_id: 1002"</span>
    <span class="s2">"empoloyee_id: 1002: employee_name: 'man', employee_position: 'finance', employee_salary: 10000, employee_hire_date: '2019-03-02', parent_id: 1, child_id: 1004"</span>
<span class="o">&gt;</span> smemebers employee
</code></pre></div></div>]]></content><author><name>Young Hwang</name></author><category term="redis" /><category term="redis" /><category term="data model" /><summary type="html"><![CDATA[Redis DB에서 설계 가능한 데이터 모델 유형들과 실제 구현 방법에 대해 정리해 보겠습니다. Redis 서버에서 설계할 수 있는 데이터 모델 유형은 크게 5가지가 있습니다.]]></summary></entry><entry><title type="html">K-DEVCON 발표 - 웹 페이지 성능 측정 지표</title><link href="/web/2023/12/03/web-page-performance.html" rel="alternate" type="text/html" title="K-DEVCON 발표 - 웹 페이지 성능 측정 지표" /><published>2023-12-03T00:00:00+00:00</published><updated>2023-12-03T00:00:00+00:00</updated><id>/web/2023/12/03/web-page-performance</id><content type="html" xml:base="/web/2023/12/03/web-page-performance.html"><![CDATA[<h2 id="k-devcon-발표">K-DEVCON 발표</h2>

<p>개인 첫 공개 세미나 연사로 참석하였습니다.</p>

<p>프론트 성능에 대한 성능 측정 지표에 대한 이야기 였는데 참석해 주신 분들에게 조금이나마 도움이 되었는지 모르겠습니다.</p>

<p>첫 공개 세미나라서 더욱 떨리고 긴장했는데, 다음에도 기회가 된다면 더욱 더 잘 준비해서 발표하고 싶습니다.</p>

<p>발표 자료는 아래 링크를 통해 확인하실 수 있습니다.</p>

<p><img src="https://onedrive.live.com/embed?resid=884E6FE11C46974%211447&amp;authkey=%21ALxGXMDrzq21xtY&amp;width=661&amp;height=459" alt="K-DEVCON" /></p>

<iframe src="https://www.slideshare.net/slideshow/embed_code/key/aKQ8d7i5FZkMKC?hostedIn=slideshare&amp;page=upload" width="476" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></content><author><name>Young Hwang</name></author><category term="web" /><category term="web" /><category term="web vitals" /><category term="core web vitals" /><category term="cwv" /><summary type="html"><![CDATA[K-DEVCON 발표]]></summary></entry><entry><title type="html">Spring MVC에서 exception handling 하기-01</title><link href="/spring/2023/09/11/spring-exception-handle.html" rel="alternate" type="text/html" title="Spring MVC에서 exception handling 하기-01" /><published>2023-09-11T00:00:00+00:00</published><updated>2023-09-11T00:00:00+00:00</updated><id>/spring/2023/09/11/spring-exception-handle</id><content type="html" xml:base="/spring/2023/09/11/spring-exception-handle.html"><![CDATA[<p>스프링을 사용하여 예외 처리를 구현하는 방법에 대하여 정리한다.
주요 목표는 클라이언트에 사용되는  HTTP <strong>Status Codes</strong>에 애플리케이션의 예외를 매핑하는 것이다.
Spring 3.2 이전에는 Spring MVC 응용 프로그램에서 예외를 처리하기 위한 두 가지 주요 접근 방식으로 <em>HandlerExceptionResolver</em>와 <em>@ExceptionHandler</em> 이 있었다.
Spring 3.2는 이전 두 솔루션의 한계를 해결하기 위해 새로운 <strong>@ControllerAdvice</strong> 주석을 도입했다.
Spring 5에서는 REST API에 기본적인 오류 처리를 위한 빠른 방법인 ResponseStatusException 클래스가 도입되었다.
이들은 모두 한 가지 공통점을 가지고 있는데, <strong>관심사의 분리</strong>를 매우 잘 따르고 있다는 것이다.
일반적으로 어떤 종류의 장애가 발생했음을 나타내기 위해 예외를 적용할 수 있으며, 이 예외는 다음 중 하나를 통해 처리하게 된다.</p>

<h2 id="controller-level에서-exceptionhandler">Controller Level에서 @ExceptionHandler</h2>

<p>에러를 처리할 방법은 정의하고 @ExceptionHandler 어노테이션을 이용한다.
해당 방법은 @Controller 레벨에서 처리하는 방법이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GreetingController</span><span class="o">{</span>
    <span class="c1">//...</span>
    <span class="nd">@ExceptionHandler</span><span class="o">({</span> <span class="nc">CustomException1</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">CustomException2</span><span class="o">.</span><span class="na">class</span> <span class="o">})</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleException</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이 방식에는 큰 단점이 있다. 
@ExceptionHandler을 이용한 방법은 해당 특정 컨트롤러에 대해서만 활성화되며, 전체 응용 프로그램에 대해서는 전역적으로 활성화되지 않는다. 
그렇다고 동일한 예외 처리를 모든 컨트롤러에 해당 annotation을 이용하여 모두 추가하는 것은 좋지 않다. 
모든 controller가 base controller를 확장하게 하여 해결할 수 있다.
그러나 이 해결책은 애플리케이션에서 여러 불가능한 상황이 발생한다.
예를 들어, 컨트롤러는 이미 다른 기본 클래스에서 확장된 것일 수도 있고, 다른 jar에 있거나 직접적인 수정이 불가능한 경우가 해당될 것이다.</p>

<p>다음으로 전역적인 문제와 컨트롤러와 같은 기존 아티팩트에 대한 변경을하지 않는 다른 방법에 대해 살펴보겠다.</p>

<h2 id="handlerexceptionresolver를-이용한-방법">handlerExceptionResolver를 이용한 방법</h2>

<p>HandlerExceptionResolver를 정의하는 방법도 있다.
이를 통해 응용 프로그램에서 발생하는 모든 예외를 해결할 수 있으며 REST API에 동일한 예외 처리 메커니즘을 구현할 수 있다.
Spring에서는 3가지의 HandlerExceptionResolver가 기본적으로 빈으로 등록된다.</p>

<h3 id="exceptionhandlerexceptionresolver">ExceptionHandlerExceptionResolver</h3>

<p>Spring 3.1에서 도입 되었다.
이는 앞서 제시한 @ExceptionHandler 메커니즘의 작동 방식을 구성하는 핵심 구성 요소이다.</p>

<h3 id="defaulthandlerexceptionresolver">DefaultHandlerExceptionResolver</h3>

<p>Spring 3.0에 도입 되었다.</p>

<p>이는 대응하는 HTTP 상태 코드, 즉 클라이언트 오류 4xx 및 서버 오류 5xx 상태 코드에 대한 표준 Spring 예외를 해결하는 데 사용된다.
처리하는 Spring 예외의 전체 목록과 상태 코드에 매핑하는 방법은 다음과 같다.
응답의 상태 코드를 올바르게 설정하지만, 한 가지 제한 사항은 응답 본문에 아무것도 설정하지 않는다는 것이다.
REST API의 경우 상태 코드가 클라이언트에 제공하기에 충분하지 않은 정보입니다. 응답 본문이 있어야 애플리케이션이 실패에 대한 추가 정보를 제공할 수 있다.
이는 ModelAndView를 통해 뷰 해상도와 렌더링 오류 콘텐츠를 구성하면 해결할 수 있지만 솔루션이 최적이 아닌 것은 분명하다.
그렇기 때문에 Spring 3.2에서 더 나은 옵션을 추가했다.</p>

<h3 id="responsestatusexceptionresolver">ResponseStatusExceptionResolver</h3>

<p>Spring 3.0에 도입 되었다.</p>

<p>주요 업무는 사용자 지정 예외에서 사용 가능한 @ResponseStatus 주석을 사용하고 이러한 예외를 HTTP 상태 코드에 매핑한다.</p>

<h2 id="handlerexceptionresolver들이-어떻게-bean으로-등록되는가">HandlerExceptionResolver들이 어떻게 Bean으로 등록되는가?</h2>

<p>그렇다면 어떻게 HandlerExceptionResolver 들이 빈으로 등록이 되는지 살펴 보겠다.
Spring MVC의 자동 설정인 WebMvcAutoConfiguration을 먼저 살표보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.springframework.boot.autoconfigure.web.servlet</span><span class="o">;</span>

<span class="nd">@AutoConfiguration</span><span class="o">(</span><span class="n">after</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">DispatcherServletAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">TaskExecutionAutoConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
		<span class="nc">ValidationAutoConfiguration</span><span class="o">.</span><span class="na">class</span> <span class="o">})</span>
<span class="nd">@ConditionalOnWebApplication</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="nc">Type</span><span class="o">.</span><span class="na">SERVLET</span><span class="o">)</span>
<span class="nd">@ConditionalOnClass</span><span class="o">({</span> <span class="nc">Servlet</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">DispatcherServlet</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">WebMvcConfigurer</span><span class="o">.</span><span class="na">class</span> <span class="o">})</span> <span class="c1">// 1 </span>
<span class="nd">@ConditionalOnMissingBean</span><span class="o">(</span><span class="nc">WebMvcConfigurationSupport</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="c1">// 2 </span>
<span class="nd">@AutoConfigureOrder</span><span class="o">(</span><span class="nc">Ordered</span><span class="o">.</span><span class="na">HIGHEST_PRECEDENCE</span> <span class="o">+</span> <span class="mi">10</span><span class="o">)</span>
<span class="nd">@ImportRuntimeHints</span><span class="o">(</span><span class="nc">WebResourcesRuntimeHints</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebMvcAutoConfiguration</span> <span class="o">{</span>

    <span class="c1">//...</span>
    
	<span class="nd">@Configuration</span><span class="o">(</span><span class="n">proxyBeanMethods</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>    <span class="c1">// 3</span>
	<span class="nd">@Import</span><span class="o">(</span><span class="nc">EnableWebMvcConfiguration</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">// 4 </span>
	<span class="nd">@EnableConfigurationProperties</span><span class="o">({</span> <span class="nc">WebMvcProperties</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">WebProperties</span><span class="o">.</span><span class="na">class</span> <span class="o">})</span>
	<span class="nd">@Order</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">WebMvcAutoConfigurationAdapter</span> <span class="kd">implements</span> <span class="nc">WebMvcConfigurer</span><span class="o">,</span> <span class="nc">ServletContextAware</span> <span class="o">{</span>
	    <span class="c1">//...</span>
    <span class="o">}</span>
    
  	<span class="nd">@Configuration</span><span class="o">(</span><span class="n">proxyBeanMethods</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>    <span class="c1">// 5</span>
	<span class="nd">@EnableConfigurationProperties</span><span class="o">(</span><span class="nc">WebProperties</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">EnableWebMvcConfiguration</span> <span class="kd">extends</span> <span class="nc">DelegatingWebMvcConfiguration</span> <span class="kd">implements</span> <span class="nc">ResourceLoaderAware</span> <span class="o">{</span>    <span class="c1">// 6</span>
	    <span class="c1">//...</span>

        <span class="c1">// 7</span>
		<span class="nd">@Override</span>
		<span class="kd">protected</span> <span class="nc">ExceptionHandlerExceptionResolver</span> <span class="nf">createExceptionHandlerExceptionResolver</span><span class="o">()</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">mvcRegistrations</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
				<span class="nc">ExceptionHandlerExceptionResolver</span> <span class="n">resolver</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">mvcRegistrations</span>
					<span class="o">.</span><span class="na">getExceptionHandlerExceptionResolver</span><span class="o">();</span>
				<span class="k">if</span> <span class="o">(</span><span class="n">resolver</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
					<span class="k">return</span> <span class="n">resolver</span><span class="o">;</span>
				<span class="o">}</span>
			<span class="o">}</span>
			<span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">createExceptionHandlerExceptionResolver</span><span class="o">();</span>
		<span class="o">}</span>

	    <span class="c1">//...</span>
    <span class="o">}</span>
    
    <span class="c1">//...  </span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.springframework.web.servlet.config.annotation</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebMvcConfigurationSupport</span> <span class="kd">implements</span> <span class="nc">ApplicationContextAware</span><span class="o">,</span> <span class="nc">ServletContextAware</span> <span class="o">{</span> <span class="c1">// 8</span>

    <span class="c1">//...</span>
    
    <span class="c1">// 9</span>
    <span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">HandlerExceptionResolver</span> <span class="nf">handlerExceptionResolver</span><span class="o">(</span>
			<span class="nd">@Qualifier</span><span class="o">(</span><span class="s">"mvcContentNegotiationManager"</span><span class="o">)</span> <span class="nc">ContentNegotiationManager</span> <span class="n">contentNegotiationManager</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">List</span><span class="o">&lt;</span><span class="nc">HandlerExceptionResolver</span><span class="o">&gt;</span> <span class="n">exceptionResolvers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
		<span class="n">configureHandlerExceptionResolvers</span><span class="o">(</span><span class="n">exceptionResolvers</span><span class="o">);</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">exceptionResolvers</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span> <span class="c1">// 10 </span>
			<span class="n">addDefaultHandlerExceptionResolwers</span><span class="o">(</span><span class="n">exceptionResolvers</span><span class="o">,</span> <span class="n">contentNegotiationManager</span><span class="o">);</span> <span class="c1">// 11 </span>
		<span class="o">}</span>
		<span class="n">extendHandlerExceptionResolvers</span><span class="o">(</span><span class="n">exceptionResolvers</span><span class="o">);</span>
		<span class="nc">HandlerExceptionResolverComposite</span> <span class="n">composite</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HandlerExceptionResolverComposite</span><span class="o">();</span>
		<span class="n">composite</span><span class="o">.</span><span class="na">setOrder</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="n">composite</span><span class="o">.</span><span class="na">setExceptionResolvers</span><span class="o">(</span><span class="n">exceptionResolvers</span><span class="o">);</span>    <span class="c1">// 15 </span>
		<span class="k">return</span> <span class="n">composite</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="c1">// 실제 적인 default handlerExceptionResolvers instance 생성</span>
	<span class="c1">// List&lt;HandlerExceptionResolver&gt; 에 생성된 instances 삽입</span>
	<span class="kd">protected</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">addDefaultHandlerExceptionResolvers</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">HandlerExceptionResolver</span><span class="o">&gt;</span> <span class="n">exceptionResolvers</span><span class="o">,</span>
			<span class="nc">ContentNegotiationManager</span> <span class="n">mvcContentNegotiationManager</span><span class="o">)</span> <span class="o">{</span>

		<span class="nc">ExceptionHandlerExceptionResolver</span> <span class="n">exceptionHandlerResolver</span> <span class="o">=</span> <span class="n">createExceptionHandlerExceptionResolver</span><span class="o">();</span> <span class="c1">// 12 </span>
		
		<span class="c1">//...</span>

		<span class="nc">ResponseStatusExceptionResolver</span> <span class="n">responseStatusResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ResponseStatusExceptionResolver</span><span class="o">();</span> <span class="c1">// 13</span>
		<span class="n">responseStatusResolver</span><span class="o">.</span><span class="na">setMessageSource</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">applicationContext</span><span class="o">);</span>
		<span class="n">exceptionResolvers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">responseStatusResolver</span><span class="o">);</span>

		<span class="n">exceptionResolvers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">DefaultHandlerExceptionResolver</span><span class="o">());</span>  <span class="c1">// 14</span>
	<span class="o">}</span>

	
	<span class="c1">//...</span>
<span class="o">}</span>
</code></pre></div></div>
<p>먼저 WebMvcAutoConfiguration이 작동하기 위해서는 아래의 조건이 만족되어야 한다.</p>

<ol>
  <li>Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class 가 클래스 로더에 존재하여야 한다.</li>
  <li>WebMvcConfigurtionSupport clsss가 bean으로 등록되지 않아야 한다.</li>
  <li>WebMvcAutoConfigurationAdapter inner class 에 @Configuration annotaion을 이용하여 빈 설정 클래스로 선언하고 있다.</li>
  <li>그리고 @Import annotation으로 EnableWebMvcConfiguration.class 를 import하고 있는데 이 또한 WebMvcAutoConfiguration class 내에 존재한다.</li>
  <li>EnableWebMvcConfiguration inner class 에 @Configuration annotation으로 빈 설정 클래스 이다.</li>
  <li>EnableWebMvcConfiguration은 DelegatingWebMvcConfiguration을 상속하고 있다.</li>
  <li>createExceptionHandlerExceptionResolver()을 override 하여 ExceptionHandlerExceptionResolver 객체를 생성한다.</li>
  <li>DelegatingWebMvcConfiguration은 WebMvcConfigurationSupport를 상속하고 있다.</li>
  <li>handlerExceptionResolver() 메소드에서 HandlerExceptionResolver bean을 생성한다.</li>
  <li>exceptionResolvers property 가 empty면 실행 default HandlerExceptionResolver 들을 생성한다.</li>
  <li>addDefaultHandlerExceptionResolwers() 메소드를 호출하여 default HandlerExceptionResolver를 생성하고 exceptionResolvers에 리스트 형태로 담는다.</li>
  <li>7번에서 override 한 메소드를 이용하여 ExceptionHandlerExceptionResolver 객체를 생성한다.</li>
  <li>ResponseStatusExceptionResolver 객체를 생성 한다.</li>
  <li>DefaultHandlerExceptionResolver 생성를 생성 한다.</li>
  <li>HandlerExceptionResolverComposite 객체에 composite 패턴을 이용하여 빈으로 등록한다.</li>
</ol>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiY2xhc3NEaWFncmFtXG5XZWJNdmNDb25maWd1cmF0aW9uU3VwcG9ydCA8LS0gRGVsZWdhdGluZ1dlYk12Y0NvbmZpZ3VyYXRpb25cbkRlbGVnYXRpbmdXZWJNdmNDb25maWd1cmF0aW9uIDwtLSBFbmFibGVXZWJNdmNDb25maWd1cmF0aW9uIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0" /></p>

<p>이러한 일련의 과정을 통하여 handlerExceptoinResolver 객체들이 빈으로 등록되게 된다.</p>

<h2 id="handlerexceptoinresolver들은-어떻게-동작하는가">handlerExceptoinResolver들은 어떻게 동작하는가?</h2>

<p>hanlderExceptionResolver가 빈으로 등록이 완료되었고 애플리케이션이 실행될 때 어떻게 실행이 되는지 살펴보도록 하겠다.
MVC를 기준으로 살펴보기에 DispatcherServlet에서의 동작을 확인한다.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiY2xhc3NEaWFncmFtXG5IdHRwU2VydmxldCA8LS0gSHR0cFNlcnZsZXRCZWFuXG5IdHRwU2VydmxldEJlYW4gPC0tIEZyYW1ld29ya1NlcnZsZXRcbkZyYW1ld29ya1NlcnZsZXQgPC0tIERpc3BhdGNoZXJTZXJ2bGV0XG48PGFic3RyYWN0Pj5IdHRwU2VydmxldFxuPDxhYnN0cmFjdD4-SHR0cFNlcnZsZXRCZWFuXG48PGFic3RyYWN0Pj5GcmFtZXdvcmtTZXJ2bGV0IiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0" /></p>

<p>앞서 살펴본 WebMvcAutoConfiguration class를 보면 ‘@AutoConfiguration(after = { DispatcherServletAutoConfiguration.class, … })’ 이 선언된 것을 확인할 수 있다.
즉 WebMvcAutoCongfiguration 설정이 이루어지기 전에 DispatcherServletAutoConfiguration.class 의 빈 설정이 먼저 진행 되어 DispatcherServlet이 빈으로 등록되게 된다.
DispatcherServlet은 Servlet이 기에 사용자의 요청이 최초로 들어올때 init() 메소드를 통한 초기화가 이루어지게 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">HttpServletBean</span> <span class="kd">extends</span> <span class="nc">HttpServlet</span> <span class="kd">implements</span> <span class="nc">EnvironmentCapable</span><span class="o">,</span> <span class="nc">EnvironmentAware</span> <span class="o">{</span>
	<span class="c1">//...</span>
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="c1">//...</span>

		<span class="c1">// Let subclasses do whatever initialization they like.</span>
		<span class="n">initServletBean</span><span class="o">();</span>  <span class="c1">// 1</span>
	<span class="o">}</span>
	
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initServletBean</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">ServletException</span> <span class="o">{</span>  <span class="c1">// 2</span>
	<span class="o">}</span>

	<span class="c1">//...</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">FrameworkServlet</span> <span class="kd">extends</span> <span class="nc">HttpServletBean</span> <span class="kd">implements</span> <span class="nc">ApplicationContextAware</span> <span class="o">{</span>
	<span class="nd">@Override</span>
	<span class="kd">protected</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">initServletBean</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">ServletException</span> <span class="o">{</span>    <span class="c1">// 3</span>
        <span class="c1">//...</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="k">this</span><span class="o">.</span><span class="na">webApplicationContext</span> <span class="o">=</span> <span class="n">initWebApplicationContext</span><span class="o">();</span>   <span class="c1">// 4</span>
			<span class="n">initFrameworkServlet</span><span class="o">();</span>
		<span class="o">}</span>
		<span class="k">catch</span> <span class="o">(</span><span class="nc">ServletException</span> <span class="o">|</span> <span class="nc">RuntimeException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"Context initialization failed"</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
			<span class="k">throw</span> <span class="n">ex</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="c1">//...</span>
	<span class="o">}</span>
	
    <span class="kd">protected</span> <span class="nc">WebApplicationContext</span> <span class="nf">initWebApplicationContext</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">WebApplicationContext</span> <span class="n">rootContext</span> <span class="o">=</span>
				<span class="nc">WebApplicationContextUtils</span><span class="o">.</span><span class="na">getWebApplicationContext</span><span class="o">(</span><span class="n">getServletContext</span><span class="o">());</span>
		<span class="nc">WebApplicationContext</span> <span class="n">wac</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="c1">//...</span>
        
		<span class="k">if</span> <span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">refreshEventReceived</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">// Either the context is not a ConfigurableApplicationContext with refresh</span>
			<span class="c1">// support or the context injected at construction time had already been</span>
			<span class="c1">// refreshed -&gt; trigger initial onRefresh manually here.</span>
			<span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">onRefreshMonitor</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">onRefresh</span><span class="o">(</span><span class="n">wac</span><span class="o">);</span> <span class="c1">// 5</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
        <span class="c1">//...</span>

		<span class="k">return</span> <span class="n">wac</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onRefresh</span><span class="o">(</span><span class="nc">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// 6</span>
		<span class="c1">// For subclasses: do nothing by default.</span>
	<span class="o">}</span>

	<span class="c1">//...</span>
<span class="o">}</span>

<span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"serial"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DispatcherServlet</span> <span class="kd">extends</span> <span class="nc">FrameworkServlet</span> <span class="o">{</span>
    <span class="c1">//...</span>
    
	<span class="nd">@Override</span>
	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onRefresh</span><span class="o">(</span><span class="nc">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// 7</span>
		<span class="n">initStrategies</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initStrategies</span><span class="o">(</span><span class="nc">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span> 
	    <span class="c1">//...</span>
		<span class="n">initHandlerExceptionResolvers</span><span class="o">(</span><span class="n">context</span><span class="o">);</span> <span class="c1">// 8</span>
	    <span class="c1">//...</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">initHandlerExceptionResolvers</span><span class="o">(</span><span class="nc">ApplicationContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">handlerExceptionResolvers</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

		<span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">detectAllHandlerExceptionResolvers</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// 9</span>
			<span class="c1">// Find all HandlerExceptionResolvers in the ApplicationContext, including ancestor contexts.</span>
			<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">HandlerExceptionResolver</span><span class="o">&gt;</span> <span class="n">matchingBeans</span> <span class="o">=</span> <span class="nc">BeanFactoryUtils</span>
					<span class="o">.</span><span class="na">beansOfTypeIncludingAncestors</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="nc">HandlerExceptionResolver</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kc">true</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span> <span class="c1">// 10</span>
			<span class="k">if</span> <span class="o">(!</span><span class="n">matchingBeans</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
				<span class="k">this</span><span class="o">.</span><span class="na">handlerExceptionResolvers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">matchingBeans</span><span class="o">.</span><span class="na">values</span><span class="o">());</span> <span class="c1">// 11</span>
				<span class="c1">// We keep HandlerExceptionResolvers in sorted order.</span>
				<span class="nc">AnnotationAwareOrderComparator</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">handlerExceptionResolvers</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">else</span> <span class="o">{</span>
		    <span class="c1">//...</span>
		<span class="o">}</span>
		
		<span class="c1">//...</span>
	<span class="o">}</span>
	
	<span class="c1">//...</span>
<span class="o">}</span>
</code></pre></div></div>

<ol>
  <li>Servlet init() 메소드 실행 시 initServletBean() 호출된다.</li>
  <li>initServletBean() 메소드는 추상 메소드로 HttpServletBean 클래스 상속 시 구현 필요하다.</li>
  <li>initServletBean() 메소드는 FrameworkServlet 클래스에서 구현되어 있다.</li>
  <li>initServletBean() 메소드를 살펴보면 initWebApplicationContext() 메소드를 호출한다.</li>
  <li>initWebApplicationContext()에서 refreshEventReceived 변수가 false 이면 onRefresh() 메소드가 호출된다.</li>
  <li>onRefresh()는 추상 메소드로 선언된것을 확인가능하다.</li>
  <li>DispatcherServlet 에서 onRefresh() 메소드가 구현되어 있다. initStrategies() 메소드만을 호출한다.</li>
  <li>initStrategies()에서는 여러 메소드를 호출하고 있는데 그중 initHandlerExceptionResolvers() 메소드를 살펴본다.</li>
  <li>initHandlerExceptionResolvers() 메소드에서 detectAllHandlerExceptionResolvers 변수가 true일 경우를 확인해본다.</li>
  <li>‘BeanFactoryUtils
.beansOfTypeIncludingAncestors(context, HandlerExceptionResolver.class, true, false)’ 메소드는 HandlerExceptionResolver.class를 구현한 객체를 가져온다.</li>
  <li>matchingBeans.values()로 handlerExceptionResolvers 변수에 HandlerExceptionResolver 인스턴스들을 할당한다.</li>
</ol>

<p>이렇게 DispatchServlet에서 HandlerExceptionResolver 들이 주입되는것도 확인하였다.</p>

<h2 id="마무리">마무리</h2>

<p>지금까지 스프링에서 사용하는 HandlerExceptionResolever의 간단히 종류와 역할에 대해서 살펴보았다.
또한 이러한 Resolver들이 어떻게 Bean으로 등록이 되고 DispatchServlet에 어떻게 주입이 되는지 까지도 보았다.
스프링에서 Composite Pattern 패턴 이나 Tempate Method 패턴을 어떻게 활용하고 있는지도 살펴 볼수 있었다.
다음에는 이 문서의 후속으로 어떻게 Controller에서 Exception을 핸들링하는지 HandlerExceptionResolver에서 어떻게 Exception을 확인하는지 알아보겠다.</p>]]></content><author><name>Young Hwang</name></author><category term="spring" /><category term="spring" /><category term="exception" /><summary type="html"><![CDATA[스프링을 사용하여 예외 처리를 구현하는 방법에 대하여 정리한다. 주요 목표는 클라이언트에 사용되는 HTTP Status Codes에 애플리케이션의 예외를 매핑하는 것이다. Spring 3.2 이전에는 Spring MVC 응용 프로그램에서 예외를 처리하기 위한 두 가지 주요 접근 방식으로 HandlerExceptionResolver와 @ExceptionHandler 이 있었다. Spring 3.2는 이전 두 솔루션의 한계를 해결하기 위해 새로운 @ControllerAdvice 주석을 도입했다. Spring 5에서는 REST API에 기본적인 오류 처리를 위한 빠른 방법인 ResponseStatusException 클래스가 도입되었다. 이들은 모두 한 가지 공통점을 가지고 있는데, 관심사의 분리를 매우 잘 따르고 있다는 것이다. 일반적으로 어떤 종류의 장애가 발생했음을 나타내기 위해 예외를 적용할 수 있으며, 이 예외는 다음 중 하나를 통해 처리하게 된다.]]></summary></entry><entry><title type="html">vanilla javascript를 이용한 객체 배열 그룹핑</title><link href="/javascript/2023/09/09/javascript-vanilla-data-grouping.html" rel="alternate" type="text/html" title="vanilla javascript를 이용한 객체 배열 그룹핑" /><published>2023-09-09T00:00:00+00:00</published><updated>2023-09-09T00:00:00+00:00</updated><id>/javascript/2023/09/09/javascript-vanilla-data-grouping</id><content type="html" xml:base="/javascript/2023/09/09/javascript-vanilla-data-grouping.html"><![CDATA[<p>Javascript에서 객체 배열을 이용하여 특정 속성을 기준으로 그룹핑하고자 하였다.
반복문을 이용해서도 만들수 있겠으나 javascript 언어만의 특성을 좀더 활용해 보고 싶었다.</p>

<h2 id="array-객체의-메소드들">Array 객체의 메소드들</h2>

<p>Java Stream의 groupingBy 같은 기능이 있을까 싶어 먼저 살펴 보았다.
하지만 배열을 바로 그룹핑하는 메소드는 존재하지 않아 보인다.
그래서 직접 구현해 보기로 하였다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">BlogPostType</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">BlogPost</span><span class="o">&gt;&gt;</span> <span class="n">postsPerType</span> <span class="o">=</span> <span class="n">posts</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
  <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">groupingBy</span><span class="o">(</span><span class="nl">BlogPost:</span><span class="o">:</span><span class="n">getType</span><span class="o">));</span>
</code></pre></div></div>

<p><img src="https://onedrive.live.com/embed?resid=884E6FE11C46974%211318&amp;authkey=%21ACScJupYO4mJgxc&amp;width=373&amp;height=630" alt="Array Methods" /></p>

<h2 id="spread-syntax">Spread syntax(…)</h2>

<p>먼전 spread syntax 이다. 
<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax">MDN</a>을 살펴보면 ‘간단히 배열이나 문자열 같이 반복 가능한 문자를 0개 이상의 인수(함수로 호출하는 경우) 또는 요소(배열 리터럴의 경우)로 확장하여, 0개 이상의 키-값 쌍으로 객체를 확장 시킬수 있다’ 라고 설명하고 있다.
말로 이해하는건 쉽지 않은거 같다. 
간단한 예제를 보면 쉽게 이해가 가능하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">sum</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span> <span class="o">+</span> <span class="nx">z</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">sum</span><span class="p">(...</span><span class="nx">numbers</span><span class="p">));</span>
<span class="c1">// Expected output: 6</span>
</code></pre></div></div>

<p>Java에서 사용하던 Variable Arguments (Varargs)과 동일하다. 
다만 javascript에서는 아래와 같이 배열이나 객체의 리터럴하여 또 다른 배열이나 객체를 생성할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 배열 리터럴과 문자열</span>
<span class="p">[...</span><span class="nx">numbers</span><span class="p">,</span> <span class="dl">"</span><span class="s2">4</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">five</span><span class="dl">"</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>
<span class="c1">// Expected output: [1, 2, 3, "4", "five", 6]</span>

<span class="c1">// 객체 리터럴</span>
<span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">john</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">10</span> <span class="p">}</span>
<span class="kd">let</span> <span class="nx">objClone</span> <span class="o">=</span> <span class="p">{</span> <span class="p">...</span><span class="nx">obj</span> <span class="p">};</span>
<span class="c1">// Expected output: { name: "john", age: 10 } </span>
</code></pre></div></div>

<h2 id="bracket-notation">Bracket notation</h2>

<p>Bracket notation(괄호 표기법)은 객체의 프로퍼티에 접근하는 다른 방법 중 하나이다.
보통 객체의 프로퍼티에 접근하기 위해서는 Dot notation(점 표기법)을 사용할 것이다. 
간단히 예를 살펴 보겠다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">john</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">17</span> <span class="p">}</span><span class="dl">'</span><span class="s1">;

// Dot notation
console.log(a.name);
// Expected output: "john"

// Bracket notation
console.log(a["name"]);
// Expected output: "john"

</span></code></pre></div></div>
<p>이처럼 Bracket notation을 사용하면 프로퍼티의 명칭을 이용하여 프로퍼티에 접근할 수 있다.</p>

<h2 id="grouping-function-만들기">Grouping Function 만들기</h2>

<p>지금까지 Grouping Function을 만들기 위한 javascript의 특징을 살펴보았다. 
이제부터 본격적으로 함수를 만들어 보겠다. 
아래의 함수는 객체 배열의 그룹핑할 컬럼을 기준으로 객체를 배열화하여 객체로 리턴하게 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">grouping</span><span class="p">(</span><span class="nx">items</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">items</span><span class="p">.</span><span class="nf">reduce</span><span class="p">(</span>
    <span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
      <span class="p">...</span><span class="nx">result</span><span class="p">,</span>
      <span class="p">[</span><span class="nx">item</span><span class="p">[</span><span class="nx">key</span><span class="p">]]:</span> <span class="p">[...(</span><span class="nx">result</span><span class="p">[</span><span class="nx">item</span><span class="p">[</span><span class="nx">key</span><span class="p">]]</span> <span class="o">||</span> <span class="p">[]),</span> <span class="nx">item</span><span class="p">],</span>
    <span class="p">}),</span>
    <span class="p">{},</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="mi">0</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="mi">1</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="dl">'</span><span class="s1">b</span><span class="dl">'</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="mi">0</span> <span class="p">},</span>
<span class="p">];</span>

<span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nf">grouping</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="dl">'</span><span class="s1">key</span><span class="dl">'</span><span class="p">);</span>

<span class="c1">// Expected output: </span>
<span class="p">{</span>
    <span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="dl">"</span><span class="s2">key</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">value</span><span class="dl">"</span><span class="p">:</span> <span class="mi">0</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="dl">"</span><span class="s2">key</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">value</span><span class="dl">"</span><span class="p">:</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">],</span>
    <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="dl">"</span><span class="s2">key</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">value</span><span class="dl">"</span><span class="p">:</span> <span class="mi">0</span>
        <span class="p">}</span>
    <span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="마무리">마무리</h2>

<p>spread syntax와 bracket notation을 이용하여 데이터를 그룹화해 보았다.
정말 다양한 곳에서 수시로 사용 되니 눈에 익혀두는게 좋겠다.</p>

<hr />

<h2 id="참조-자료">참조 자료</h2>

<p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array</a>
<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax</a>
<a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics</a></p>]]></content><author><name>Young Hwang</name></author><category term="javascript" /><category term="javascript" /><category term="grouping" /><summary type="html"><![CDATA[Javascript에서 객체 배열을 이용하여 특정 속성을 기준으로 그룹핑하고자 하였다. 반복문을 이용해서도 만들수 있겠으나 javascript 언어만의 특성을 좀더 활용해 보고 싶었다.]]></summary></entry><entry><title type="html">mysql에서 max_allowed_packet 설정은 언제 사용하는가?</title><link href="/database/2023/09/01/database-mysql-max-allowed-packet.html" rel="alternate" type="text/html" title="mysql에서 max_allowed_packet 설정은 언제 사용하는가?" /><published>2023-09-01T00:00:00+00:00</published><updated>2023-09-01T00:00:00+00:00</updated><id>/database/2023/09/01/database-mysql-max-allowed-packet</id><content type="html" xml:base="/database/2023/09/01/database-mysql-max-allowed-packet.html"><![CDATA[<p>max_allowed_packet은 서버에서 읽거나 생성되어지는 MySQL 네트워크 패킷의 최대 사이즈를 의미합니다.
parameter는 요구사항에 따라 변경할 수 있는 기본값, 최소값, 최대값을 제공합니다.</p>

<table>
  <thead>
    <tr>
      <th>name</th>
      <th>description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Variable</td>
      <td>max_allowed_packet</td>
    </tr>
    <tr>
      <td>Configuration</td>
      <td>Supported</td>
    </tr>
    <tr>
      <td>Scope</td>
      <td>session, global</td>
    </tr>
    <tr>
      <td>Status</td>
      <td>Dynamic</td>
    </tr>
    <tr>
      <td>Data Type</td>
      <td>BIGINT UNSIGNED</td>
    </tr>
    <tr>
      <td>Default Value</td>
      <td>16777216</td>
    </tr>
    <tr>
      <td>Minimum Value</td>
      <td>1024</td>
    </tr>
    <tr>
      <td>Maximum Value</td>
      <td>1073741824</td>
    </tr>
  </tbody>
</table>

<h2 id="사용-방법">사용 방법</h2>

<p>max_allowed_packet의 설정을 변경하는 방법은 여러가지가 있습니다. 
기본적으로 기본값은 16MB로 설정되어 있습니다.
설정을 변경하는 방법은 아래와 같습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$&gt;</span> mysql <span class="nt">--max_allowed_packet</span><span class="o">=</span>32M
</code></pre></div></div>

<p>클라이언트나 서버에서 위와 같이 실행 시 클라이언트나 서버의 기본값은 32MB로 변경됩니다.
특히 대규모 데이터 쿼리를 실행 시 서버의 값의 변경은 중요합니다.</p>

<p>마지막으로 configuration file을 이용하여 설정할 수 있습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>mysqld]
<span class="nv">max_allowed_packet</span><span class="o">=</span>32M
</code></pre></div></div>

<p>이와 같이 설정하면 오류 없이 더큰 쿼리를 전송할 수 있습니다.</p>

<h2 id="언제-변경하는가">언제 변경하는가?</h2>

<p>그러면 언제 max_allowed_packet을 변경 하여야 할까요?
클라이언트 서버가 더 큰 패킷를 받으면 에러가 발생하게 됩니다.
연결에 ER_NET_PACKET_TOO_LARGE 라는 에러가 발생하게 되고 즉시 닫히게 됩니다.</p>

<p>또 다른 에러는 대용량 패킷으로 쿼리 수행중 연결을 잃어 버릴수 있습니다.(Lost Connection to Server During Query Error)</p>

<p>이른 max_allowed_packet에 설정된 값이 업로드 파일의 사이즈 보다 작을 때 발생합니다.
트랜젝션을 성공하라면 클라이언트와 서버에서 값을 변경하여야 합니다.</p>]]></content><author><name>Young Hwang</name></author><category term="database" /><category term="mysql" /><category term="max_allowed_packet" /><summary type="html"><![CDATA[max_allowed_packet은 서버에서 읽거나 생성되어지는 MySQL 네트워크 패킷의 최대 사이즈를 의미합니다. parameter는 요구사항에 따라 변경할 수 있는 기본값, 최소값, 최대값을 제공합니다.]]></summary></entry><entry><title type="html">HyperLogLog를 이용한 확률적 추론</title><link href="/redis/2023/04/07/redis-hyperloglog.html" rel="alternate" type="text/html" title="HyperLogLog를 이용한 확률적 추론" /><published>2023-04-07T00:00:00+00:00</published><updated>2023-04-07T00:00:00+00:00</updated><id>/redis/2023/04/07/redis-hyperloglog</id><content type="html" xml:base="/redis/2023/04/07/redis-hyperloglog.html"><![CDATA[<h2 id="문제점">문제점</h2>

<p>서비스를 이용한 이용자 수와 사용자가 앱을 실행한 횟수를 일별 집계하여 조회하고 있었다.
이를 위하여 분마다 이용자 수와 사용자 수를 DB에 저장하고 이를 조회 시 하루 동안의 이용자 수와 사용자 수에서 중복 되는 키값을 제외 하여 조회 처리를 하고 있었다.
분마다 데이터를 생성한 이유는 하루의 시간대 별로 이용자 수와 실행 수도 표현이 되어야 하였기 때문이다.
단순 계산으로도 하루의 이용자 수, 실행 수를 구하기 위해서는 60(분) * 24(시간) = 1440(건)의 데이터를 조회 후 중복 되는 키값을 제거하는 큰 비용이 발생했다.
또한 이를 5분 단위, 10분 단위로 그룹화 하여 표현 하는 경우도 있어 조회 시 조회 시간이 10초 이상 걸리는 문제가 지속되었다.</p>

<p><img src="https://onedrive.live.com/embed?resid=884E6FE11C46974%211315&amp;authkey=%21AHeJy0-XtTi9KiU&amp;width=696&amp;height=181" alt="분단위 데이터 집계 현황" />
<img src="https://onedrive.live.com/embed?resid=884E6FE11C46974%211316&amp;authkey=%21ALYahgrEMfkio1o&amp;width=310&amp;height=247" alt="조회 시 데이터 집계 현황" /></p>

<h2 id="hyperloglog란">HyperLogLog란</h2>

<p>HyperLogLog 알고리즘은 Philippe Flajolet, Éric Fusy, Olivier Gandouet, Frédéric Meunier가 2007년에 발표한 논문 “HyperLogLog: the analysis of a near-optimal cardinality estimation algorithm”에서 처음 제안되었다.
매우 큰 데이터 집합에서 고유한 값의 개수를 추정하기 위해 사용되는 확률적인 알고리즘이다. 
이 알고리즘은 매우 적은 메모리를 사용하여 대규모 데이터 집합에서 빠르게 작동하며, 정확성과 성능 사이의 균형을 유지한다.
핵심 아이디어는 각 값의 해시 값을 사용하여 값을 버킷(bucket)으로 매핑하는 것이다. 
버킷은 이진 값으로 표시되며, 값의 해시 결과에서 가장 오래된 연속된 0의 개수를 세는 것으로 나타난다. 
예를 들어, 값의 해시 결과에서 처음 1을 만날 때까지 0의 개수가 3이면 해당 값의 버킷은 2^(3+1) = 16 이다. 
이진 값의 길이가 n인 버킷에서 최대 0의 개수는 n입니다.
이러한 버킷의 수를 추적하고, 일부 버킷이 적어도 하나의 값을 가질 때의 추정치를 사용하여 전체 고유 값의 개수를 추정한다. 
이 추정치는 매우 정확하지는 않지만, 매우 큰 데이터 집합에서도 상대적으로 작은 오류를 유지한다.
일반적으로 다음과 같은 단계로 수행됩니다.</p>

<ul>
  <li>n비트 길이의 해시 값을 계산하고, 해당 값을 이진 값으로 변환하여 가장 오래된 연속된 0의 개수를 계산한다.</li>
  <li>해당 버킷의 값을 갱신한다.</li>
  <li>추정치를 계산하기 위해 각 버킷의 값을 사용한다.</li>
</ul>

<h2 id="hyperloglog-in-redis">HyperLogLog in Redis</h2>

<p>Redis HyperLogLog는 다음과 같은 몇 가지 기본 명령어를 제공한다.</p>

<ul>
  <li>PFADD key element [element …]: HyperLogLog에 요소를 추가</li>
  <li>PFCOUNT key [key …]: HyperLogLog에 있는 고유한 요소의 수를 반환</li>
  <li>PFMERGE destkey sourcekey [sourcekey …]: 여러 HyperLogLog를 병합하여 단일 HyperLogLog로 결합</li>
</ul>

<p>이러한 기능을 사용하여 Redis HyperLogLog는 매우 큰 데이터 집합에서 고유한 값의 개수를 추정하는 데 활용한다.</p>

<h2 id="어떻게-활용-할-것인가">어떻게 활용 할 것인가?</h2>

<p>조회의 범위가 24시간 미만일 경우 분단위의 이용자수, 실행수가 필요하며 24시간 이상시 30분 단위의 이용자수, 실행수가 필요하였다.
따라서 HyperLogLog 생성 시 1분 단위와 30분 단위의 집계를 동시에 생성하기로 하였다.
1분 단위의 HyperLogLog로 다 처리 가능하지 않나라고 의문이 들수 있을 것이다.
하루에 대한 1440번의 pfmerge는 만족스런 속도가 나오지 않았다. 
따라서 30분 단위의 집계를 따로 구성하여 하루의 이용자 수, 실행 수를 구하였다. 
또한 time-zone에 따른 이슈도에 크게 무리 없이 대응 할 수 있었다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">add</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">uuid</span><span class="p">,</span> <span class="nx">ex</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">res</span><span class="p">,</span> <span class="nx">rej</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">// HyperLogLog에 key 저장</span>
      <span class="nx">redisClient</span><span class="p">.</span><span class="nf">pfadd</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">uuid</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">field</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
          <span class="nf">rej</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">redisClient</span><span class="p">.</span><span class="nf">expire</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">ex</span><span class="p">,</span> <span class="nx">err</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
            <span class="nf">rej</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
          <span class="p">}</span>
          <span class="nf">res</span><span class="p">(</span><span class="nx">field</span><span class="p">);</span>
        <span class="p">});</span>
      <span class="p">});</span>
    <span class="p">});</span>
  <span class="p">}</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">getCachedUserConnectionCount</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">// HyperLogLog count 값 가져오기</span>
      <span class="nx">redis</span><span class="p">.</span><span class="nf">pfcount</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">field</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nf">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nf">resolve</span><span class="p">({</span> <span class="nx">key</span><span class="p">,</span> <span class="na">count</span><span class="p">:</span> <span class="nx">field</span> <span class="p">});</span>
      <span class="p">});</span>
    <span class="p">});</span>
  <span class="p">}</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">createMergedElement</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">sources</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="c1">// pfmerge를 이용한 HyperLogLog merge 생성</span>
      <span class="nx">redis</span><span class="p">.</span><span class="nf">pfmerge</span><span class="p">(</span>
        <span class="nx">key</span><span class="p">,</span>
        <span class="nx">sources</span><span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">source</span> <span class="o">=&gt;</span> <span class="nx">source</span><span class="p">.</span><span class="nx">key</span><span class="p">),</span>
        <span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">logger</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
            <span class="k">return</span> <span class="nf">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
          <span class="p">}</span>
          <span class="nf">resolve</span><span class="p">();</span>
        <span class="p">},</span>
      <span class="p">);</span>
    <span class="p">});</span>
  <span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Young Hwang</name></author><category term="redis" /><category term="algorithm" /><category term="hyperloglog" /><category term="redis" /><summary type="html"><![CDATA[문제점]]></summary></entry><entry><title type="html">Dynamic Datasource Routing 적용기</title><link href="/spring/2022/12/22/spring-dynamic-datasource-routing.html" rel="alternate" type="text/html" title="Dynamic Datasource Routing 적용기" /><published>2022-12-22T00:00:00+00:00</published><updated>2022-12-22T00:00:00+00:00</updated><id>/spring/2022/12/22/spring-dynamic-datasource-routing</id><content type="html" xml:base="/spring/2022/12/22/spring-dynamic-datasource-routing.html"><![CDATA[<h2 id="언제-사용하는가">언제 사용하는가?</h2>

<p>보통 애플리케이션에서는 하나 이상의 데이터베이스를 사용해야 하는 경우가 많습니다. 
예를 들어, 마스터-슬레이브 데이터베이스 구조를 사용하거나, 
여러 개의 데이터베이스 서버를 사용하는 등의 상황에서 다중 데이터 소스를 관리해야 합니다.</p>

<p>하지만 요청이 들어올 때마다 데이터베이스를 동적으로 선택하거나 데이터 소스가 추가되는 경우도 있습니다.
즉 Master/Slave의 DB 분기 처리라던지 Replication DB 처럼 여러 DB를 그때 그때 선택하는 경우가 될 것입니다.</p>

<p>이럴경우 사용이 가능한 방법이 “AbstractRoutingDatasource”를 이용한 “Dynamic Datasource Routing”입니다.</p>

<h2 id="abstractroutingdatasource-란">AbstractRoutingDatasource 란?</h2>

<p>“AbstractRoutingDatasource”는 spring 2.0.1 부터 추가 되었으며 spring-jdbc 프로젝트에 포함되어 있습니다.
“DataSource”를 구현한 구현체인데요. 
“javax.sql.DataSource” 인터페이스로 정의가 되어 있습니다.
이 인터페이스는 데이터 베이스와의 연결을 설정하고 얻는데 사용됩니다.</p>

<p><img class="mermaid" src="https://mermaid.ink/svg/eyJjb2RlIjoiY2xhc3NEaWFncmFtXG5EYXRhU291cmNlIDx8LS0gQWJzdHJhY3REYXRhU291cmNlXG5BYnN0cmFjdERhdGFTb3VyY2UgPHwtLSBBYnN0cmFjdFJvdXRpbmdEYXRhU291cmNlIiwibWVybWFpZCI6eyJ0aGVtZSI6ImRlZmF1bHQifX0" /></p>

<p>“AbstractRoutingDataSource”의 가장 중요한 특징은 개발자가 “determineCurrentLookupKey()”라는 추상 메소드를 구현하여 
현재 스레드의 컨텍스트에서 사용될 데이터 베이스를 결정한다는 것입니다.
“AbstractRoutingDataSource”에는 여러 메소드들이 있지만 주요한 메소드를 살펴 보겠습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">org.springframework.jdbc.datasource.lookup</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractRoutingDataSource</span> <span class="kd">extends</span> <span class="nc">AbstractDataSource</span> <span class="kd">implements</span> <span class="nc">InitializingBean</span> <span class="o">{</span>
    
    <span class="o">...</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Connection</span> <span class="nf">getConnection</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">SQLException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">determineTargetDataSource</span><span class="o">().</span><span class="na">getConnection</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="o">...</span>

    <span class="kd">protected</span> <span class="nc">DataSource</span> <span class="nf">determineTargetDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">resolvedDataSources</span><span class="o">,</span> <span class="s">"DataSource router not initialized"</span><span class="o">);</span>
        <span class="nc">Object</span> <span class="n">lookupKey</span> <span class="o">=</span> <span class="n">determineCurrentLookupKey</span><span class="o">();</span>
        <span class="nc">DataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">resolvedDataSources</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">lookupKey</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">dataSource</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">lenientFallback</span> <span class="o">||</span> <span class="n">lookupKey</span> <span class="o">==</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">dataSource</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">resolvedDefaultDataSource</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">dataSource</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"Cannot determine target DataSource for lookup key ["</span> <span class="o">+</span> <span class="n">lookupKey</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Nullable</span>
    <span class="kd">protected</span> <span class="kd">abstract</span> <span class="nc">Object</span> <span class="nf">determineCurrentLookupKey</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>getConnection() 을 살펴 보면 connection을 얻기 위하여 determineTargetDataSource() 메소드를 호출하여 DataSource 객체를
가져오는 것을 확인할 수 있습니다.
determineTargetDataSource() 는 DataSource 를 가져오기 위한 Template Method 입니다.
determineCurrentLookupKey() 메소드를 이용하여 key가 될 객체를 가져오고 이를 활용하여 DataSource를 선택하게 됩니다. 
determineCurrentLookupKey() 메소드는 추상 메소드로 AbstractRoutingDataSource를 구현한 클래스에서 반드시 
구현하여야 합니다.
그렇다면 determineCurrentLookupKey()를 어떻게 구현을 할 것인가? 
간단한 사용 사례로는 현재 사용자의 context의 속성으로 사용을 하는 방법이 있습니다.</p>

<h2 id="abstractroutingdatasource-구현-하기">AbstractRoutingDataSource 구현 하기</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">io.github.younghwang.dynamicdatasourcerouting</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomerRoutingDataSource</span> <span class="kd">extends</span> <span class="nc">AbstractRoutingDataSource</span> <span class="o">{</span>
    <span class="c1">// determineCurrentLookupKey의 구현</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="nc">Object</span> <span class="nf">determineCurrentLookupKey</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">CustomerDataSourceContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">getLookupKey</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>AbstractRoutingDatasource를 상속하여 CustomerContextHolder 에서 context 정보를 가져와 다시 
key를 가져오도록 CustomRoutingDataSource 를 구현하였습니다.</p>

<h2 id="datasourcelookupkey-function-contextholder-구현">DataSourceLookupKey Function, ContextHolder 구현</h2>

<p>LookupKey 를 가져오기 위한 Functional Interface를 구현합니다.
추후 이를 구현하여 key 객체를 구할 수 있도록 합니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DataSourceLookupKeyFunction</span> <span class="o">{</span>

    <span class="nc">Object</span> <span class="nf">getLookupKey</span><span class="o">();</span>

<span class="o">}</span>

</code></pre></div></div>

<p>Context 정보를 이용한다고 하였는데 이를 위하여 ThreadLocal 을 이용한 context holder를 구현한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">org.springframework.util.Assert</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomerDataSourceContextHolder</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="nc">DataSourceLookupKeyFunction</span><span class="o">&gt;</span> <span class="n">contextHolder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadLocal</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">DataSourceLookupKeyFunction</span> <span class="nf">getContext</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">contextHolder</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setContext</span><span class="o">(</span><span class="nc">DataSourceLookupKeyFunction</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="s">"DataSourceLookupKey cannot be null"</span><span class="o">);</span>
        <span class="n">contextHolder</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">clearContext</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">contextHolder</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>이렇게 Dynamic Data Source 를 가져오기 위한 기본적인 구성이 되었습니다.
하지만 아직 CustomerRoutingDataSource 에 DataSource 정보는 없는 상태입니다.
Multiple Data Source 를 가질 수 있도록 해보겠습니다.</p>

<h2 id="multiple-data-source-구현">Multiple Data Source 구현</h2>

<p>먼저 Data Source 의 정보들이 필요합니다. 
이를 위해 application.yml에 정보를 추가하고 이를 Properties Bean을 등록해 보겠습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// application.yml</span>

<span class="nl">server:</span>
    <span class="nl">sources:</span>
        <span class="nl">MASTER:</span>
            <span class="nl">host:</span> <span class="n">localhost</span>
            <span class="nl">port:</span> <span class="mi">3306</span>
            <span class="nl">user:</span> <span class="n">root</span>
            <span class="nl">password:</span> <span class="n">passwd</span>
        <span class="nl">SLAVE:</span>
            <span class="nl">host:</span> <span class="n">localhost</span>
            <span class="nl">port:</span> <span class="mi">4306</span>
            <span class="nl">user:</span> <span class="n">root</span>
            <span class="nl">password:</span> <span class="n">passwd</span>

</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">org.springframework.boot.context.properties.ConfigurationProperties</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="n">prefix</span> <span class="o">=</span> <span class="s">"server"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomerDataSourceProperties</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">CustomerDataSourceProperty</span><span class="o">&gt;</span> <span class="n">sources</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">CustomerDataSourceProperty</span><span class="o">&gt;</span> <span class="nf">getSources</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">sources</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSources</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">CustomerDataSourceProperty</span><span class="o">&gt;</span> <span class="n">sources</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">sources</span> <span class="o">=</span> <span class="n">sources</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">CustomerDataSourceProperty</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">host</span><span class="o">;</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">port</span><span class="o">;</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">user</span><span class="o">;</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>

        <span class="c1">// getter, setter 구현</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>Data Source 정보를 활용하여 CustomerRoutingDataSource 에 DataSource를 등록할수 있도록 Factory를 구성하겠습니다.
이 Factory Class 를 통해 CustomerRoutingDataSource 객체가 생성되게 됩니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MainRoutingDataSourceFactory</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">dataSourceMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>
    <span class="kd">private</span> <span class="nc">AbstractRoutingDataSource</span> <span class="n">routingDataSource</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span>  <span class="n">databasePropertyService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">DataSource</span> <span class="nf">createRoutingDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">routingDataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MainRoutingDataSource</span><span class="o">();</span>
        <span class="nc">DataSource</span> <span class="n">defaultDataSource</span> <span class="o">=</span> <span class="n">createDefaultDataSource</span><span class="o">();</span>
        <span class="n">dataSourceMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="no">MAIN_PROXY_KEY</span><span class="o">,</span> <span class="n">defaultDataSource</span><span class="o">);</span>
        <span class="n">routingDataSource</span><span class="o">.</span><span class="na">setTargetDataSources</span><span class="o">(</span><span class="n">dataSourceMap</span><span class="o">);</span>
        <span class="n">routingDataSource</span><span class="o">.</span><span class="na">setDefaultTargetDataSource</span><span class="o">(</span><span class="n">defaultDataSource</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">routingDataSource</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * DataSource 미존재 시 생성하여 dataSourceMap에 추가
     *
     * @param projectInfo
     */</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDataSource</span><span class="o">(</span><span class="nc">ProjectInfo</span> <span class="n">projectInfo</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">hasDataSource</span><span class="o">(</span><span class="n">projectInfo</span><span class="o">))</span> <span class="k">return</span><span class="o">;</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">DatabaseProperty</span><span class="o">&gt;</span> <span class="n">dataSourceInfo</span> <span class="o">=</span> <span class="n">databasePropertyService</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">projectInfo</span><span class="o">.</span><span class="na">getProjectKey</span><span class="o">());</span>
        <span class="nc">DatabaseProperty</span> <span class="n">info</span> <span class="o">=</span> <span class="n">dataSourceInfo</span><span class="o">.</span><span class="na">orElseThrow</span><span class="o">(</span><span class="nl">NoSuchElementException:</span><span class="o">:</span><span class="k">new</span><span class="o">);</span>
        <span class="nc">DataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="n">createDataSource</span><span class="o">(</span><span class="n">dataSourceInfo</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
        <span class="k">try</span> <span class="o">(</span><span class="nc">Connection</span> <span class="n">c</span> <span class="o">=</span> <span class="n">ds</span><span class="o">.</span><span class="na">getConnection</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">info</span><span class="o">.</span><span class="na">getProjectKeys</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">key</span> <span class="o">-&gt;</span> <span class="n">dataSourceMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">ds</span><span class="o">));</span>
            <span class="n">routingDataSource</span><span class="o">.</span><span class="na">afterPropertiesSet</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/**
     * dataSourceMap에 해당 프로젝트의 DataSource가 있는지 확인
     *
     * @param projectInfo
     * @return
     */</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasDataSource</span><span class="o">(</span><span class="nc">ProjectInfo</span> <span class="n">projectInfo</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">dataSourceMap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">projectInfo</span><span class="o">.</span><span class="na">getSourceKey</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="cm">/**
     * DataSource 생성
     *
     * @param info
     * @return
     */</span>
    <span class="kd">public</span> <span class="nc">DataSource</span> <span class="nf">createDataSource</span><span class="o">(</span><span class="nc">DatabaseProperty</span> <span class="n">info</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">DataSourceProperties</span> <span class="n">dataSourceProperties</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DataSourceProperties</span><span class="o">();</span>
        <span class="n">dataSourceProperties</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="s">"jdbc:mysql://"</span> <span class="o">+</span> <span class="n">info</span><span class="o">.</span><span class="na">getHost</span><span class="o">()</span> <span class="o">+</span> <span class="s">":"</span> <span class="o">+</span> <span class="n">info</span><span class="o">.</span><span class="na">getPort</span><span class="o">()</span> <span class="o">+</span> <span class="s">"?serverTimezone=Asia/Seoul"</span><span class="o">);</span>
        <span class="n">dataSourceProperties</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">info</span><span class="o">.</span><span class="na">getUser</span><span class="o">());</span>
        <span class="n">dataSourceProperties</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">info</span><span class="o">.</span><span class="na">getPassword</span><span class="o">());</span>
        <span class="n">dataSourceProperties</span><span class="o">.</span><span class="na">setDriverClassName</span><span class="o">(</span><span class="s">"com.mysql.cj.jdbc.Driver"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">dataSourceProperties</span><span class="o">.</span><span class="na">initializeDataSourceBuilder</span><span class="o">().</span><span class="na">type</span><span class="o">(</span><span class="nc">HikariDataSource</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">DataSource</span> <span class="nf">createDefaultDataSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">createDataSource</span><span class="o">(</span><span class="n">databasePropertyService</span><span class="o">.</span><span class="na">getDefaultDataSource</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="참고-문헌">참고 문헌</h1>

<hr />

<p>https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.html
https://spring.io/blog/2007/01/23/dynamic-datasource-routing</p>]]></content><author><name>Young Hwang</name></author><category term="spring" /><category term="spring" /><category term="spring data" /><summary type="html"><![CDATA[언제 사용하는가?]]></summary></entry></feed>